From cec12ce96823161008e553a2e85eec7fcdbaa326 Mon Sep 17 00:00:00 2001
From: SimonFJ20 <simonfromjakobsen@gmail.com>
Date: Tue, 1 Nov 2022 00:12:17 +0100
Subject: [PATCH] some checking

---
 danskc/.gitignore                            |  1 +
 danskc/virtual-computer/assembler.py         | 37 +++++++++++++--
 danskc/virtual-computer/assembler/symbols.py | 50 ++++++++++++++++++++
 danskc/virtual-computer/test.asm             |  2 +
 4 files changed, 85 insertions(+), 5 deletions(-)
 create mode 100644 danskc/virtual-computer/assembler/symbols.py

diff --git a/danskc/.gitignore b/danskc/.gitignore
index bee8a64..ab47253 100644
--- a/danskc/.gitignore
+++ b/danskc/.gitignore
@@ -1 +1,2 @@
 __pycache__
+*.pyc
\ No newline at end of file
diff --git a/danskc/virtual-computer/assembler.py b/danskc/virtual-computer/assembler.py
index d0cda33..137d4a7 100644
--- a/danskc/virtual-computer/assembler.py
+++ b/danskc/virtual-computer/assembler.py
@@ -1,16 +1,43 @@
-from enum import Enum, auto
-from typing import Callable, Dict, List, Optional
-from assembler.parser import Line, parse_lines
+from typing import List
+from assembler.symbols import SymbolTable, find_symbols
+from assembler.parser import Line, Operation, parse_lines
+
+def check_operations(operations: List[Operation], symbols: SymbolTable) -> None:
+    for operation in operations:
+        if operation.operator == "noop":
+            if len(operation.operands) != 0:
+                raise Exception(f"\"{len(operation.operands)}\" instruction expects 0 arguments, {len(operation.operands)} was given")
+        elif operation.operator == "jmp":
+            if len(operation.operands) != 1:
+                raise Exception(f"\"{len(operation.operands)}\" instruction expects 1 argument, {len(operation.operands)} was given")
+        elif operation.operator == "jnz":
+            if len(operation.operands) != 2:
+                raise Exception(f"\"{len(operation.operands)}\" instruction expects 2 arguments, {len(operation.operands)} was given")
+        elif operation.operator == "mov":
+            if len(operation.operands) != 2:
+                raise Exception(f"\"{len(operation.operands)}\" instruction expects 2 arguments, {len(operation.operands)} was given")
+        elif operation.operator == "load":
+            if len(operation.operands) != 2:
+                raise Exception(f"\"{len(operation.operands)}\" instruction expects 2 arguments, {len(operation.operands)} was given")
+        elif operation.operator == "store":
+            if len(operation.operands) != 2:
+                raise Exception(f"\"{len(operation.operands)}\" instruction expects 2 arguments, {len(operation.operands)} was given")
+        elif operation.operator in ["and", "or", "xor", "add", "sub", "mul", "div", "mod", "shl", "cmp", "lt"]:
+            if len(operation.operands) != 2:
+                raise Exception(f"\"{len(operation.operands)}\" instruction expects 2 arguments, {len(operation.operands)} was given")
+        else:
+            raise Exception(f"unknown instruction \"{operation.operator}\"")
 
 
 
 def assemble(text: str) -> str:
     lines = parse_lines(text)
-    return "[\n" + ",".join([" ".join(line.to_json().split()) for line in lines]) + "\n]"
+    symbols = find_symbols(lines)
+    # return "[\n" + ",".join([" ".join(line.to_json().split()) for line in lines]) + "\n]"
+    lines = [line for line in lines if line.operation]
 
 if __name__ == "__main__":
     from argparse import ArgumentParser
-    import sys
     argparser = ArgumentParser()
     argparser.add_argument("file")
     args = argparser.parse_args()
diff --git a/danskc/virtual-computer/assembler/symbols.py b/danskc/virtual-computer/assembler/symbols.py
new file mode 100644
index 0000000..ff9c012
--- /dev/null
+++ b/danskc/virtual-computer/assembler/symbols.py
@@ -0,0 +1,50 @@
+from typing import Dict, List
+from assembler.parser import Line
+
+class SymbolTable:
+    def __init__(self, global_symbols: Dict[str, int], local_symbols: Dict[str, List[int]]) -> None:
+        self.global_symbols = global_symbols
+        self.local_symbols = local_symbols
+    
+
+class SymbolTableBuilder:
+    def __init__(self) -> None:
+        self.global_symbols: Dict[str, int] = {}
+        self.local_symbols: Dict[str, List[int]] = {}
+
+    def build(self) -> SymbolTable:
+        return SymbolTable(self.global_symbols, self.local_symbols)
+
+    def define_local(self, name: str, lc: int) -> None:
+        if name not in self.local_symbols:
+            self.local_symbols[name] = []
+        self.local_symbols[name].append(lc)
+
+    def define_global(self, name, lc: int) -> None:
+        if name in self.global_symbols:
+            raise Exception(f"multiple defitions of symbol \"{name}\"")
+        self.global_symbols[name] = lc
+
+def instruction_size(operator: str) -> int:
+    if operator == "noop":
+        return 1
+    elif operator in ["jmp", "jnz"]:
+        return 2
+    elif operator in ["mov", "and", "or", "xor", "add", "sub", "mul", "div", "mod", "shl", "cmp", "lt", "load", "store"]:
+        return 3
+    else:
+        raise Exception(f"unknown instruction \"{operator}\"")
+
+
+def find_symbols(lines: List[Line]) -> SymbolTable:
+    symbols = SymbolTableBuilder()
+    lc = 0
+    for line in lines:
+        if line.label:
+            if line.label.startswith("."):
+                symbols.define_local(line.label, lc)
+            else:
+                symbols.define_global(line.label, lc)
+        if line.operation:
+            lc += instruction_size(line.operation.operator)
+    return symbols.build()
diff --git a/danskc/virtual-computer/test.asm b/danskc/virtual-computer/test.asm
index 2e1cbfc..44bed47 100644
--- a/danskc/virtual-computer/test.asm
+++ b/danskc/virtual-computer/test.asm
@@ -1,4 +1,6 @@
 
+.local: mov a, b
+.local: mov a, b
 .local: mov a, b
 lobal: mov a, [ (1 + (2 * 3))]
 mov a, b
-- 
2.25.1

