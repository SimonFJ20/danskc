From 441527b30d76b13061d69e909216d4ffd24603e8 Mon Sep 17 00:00:00 2001
From: SimonFJ20 <simonfromjakobsen@gmail.com>
Date: Fri, 4 Nov 2022 17:49:55 +0100
Subject: [PATCH] rename to use '_' instead of '-'

---
 .../asm-grammar.txt                           |   0
 .../assembler/__init__.py                     |   0
 .../assembler/__main__.py                     |   0
 .../assembler/checker.py                      |   0
 .../assembler/examples/clear_fast.asm         | 190 +++++++--------
 .../assembler/examples/clear_regular.asm      | 222 +++++++++---------
 .../assembler/examples/clear_slow.asm         | 198 ++++++++--------
 .../assembler/generator.py                    |   0
 .../assembler/parser.py                       |   0
 .../assembler/spec.py                         |   0
 .../assembler/symbols.py                      |   0
 11 files changed, 305 insertions(+), 305 deletions(-)
 rename danskc/{virtual-computer => virtual_computer}/asm-grammar.txt (100%)
 rename danskc/{virtual-computer => virtual_computer}/assembler/__init__.py (100%)
 rename danskc/{virtual-computer => virtual_computer}/assembler/__main__.py (100%)
 rename danskc/{virtual-computer => virtual_computer}/assembler/checker.py (100%)
 rename danskc/{virtual-computer => virtual_computer}/assembler/examples/clear_fast.asm (93%)
 rename danskc/{virtual-computer => virtual_computer}/assembler/examples/clear_regular.asm (93%)
 rename danskc/{virtual-computer => virtual_computer}/assembler/examples/clear_slow.asm (93%)
 rename danskc/{virtual-computer => virtual_computer}/assembler/generator.py (100%)
 rename danskc/{virtual-computer => virtual_computer}/assembler/parser.py (100%)
 rename danskc/{virtual-computer => virtual_computer}/assembler/spec.py (100%)
 rename danskc/{virtual-computer => virtual_computer}/assembler/symbols.py (100%)

diff --git a/danskc/virtual-computer/asm-grammar.txt b/danskc/virtual_computer/asm-grammar.txt
similarity index 100%
rename from danskc/virtual-computer/asm-grammar.txt
rename to danskc/virtual_computer/asm-grammar.txt
diff --git a/danskc/virtual-computer/assembler/__init__.py b/danskc/virtual_computer/assembler/__init__.py
similarity index 100%
rename from danskc/virtual-computer/assembler/__init__.py
rename to danskc/virtual_computer/assembler/__init__.py
diff --git a/danskc/virtual-computer/assembler/__main__.py b/danskc/virtual_computer/assembler/__main__.py
similarity index 100%
rename from danskc/virtual-computer/assembler/__main__.py
rename to danskc/virtual_computer/assembler/__main__.py
diff --git a/danskc/virtual-computer/assembler/checker.py b/danskc/virtual_computer/assembler/checker.py
similarity index 100%
rename from danskc/virtual-computer/assembler/checker.py
rename to danskc/virtual_computer/assembler/checker.py
diff --git a/danskc/virtual-computer/assembler/examples/clear_fast.asm b/danskc/virtual_computer/assembler/examples/clear_fast.asm
similarity index 93%
rename from danskc/virtual-computer/assembler/examples/clear_fast.asm
rename to danskc/virtual_computer/assembler/examples/clear_fast.asm
index 4632b1e..5f321f8 100644
--- a/danskc/virtual-computer/assembler/examples/clear_fast.asm
+++ b/danskc/virtual_computer/assembler/examples/clear_fast.asm
@@ -1,95 +1,95 @@
-
-; r5 = pointer
-; r6 = stack pointer
-; r7 = base stack pointer
-iv:
-    noop
-    noop
-    noop
-    noop
-    noop
-
-_entry:
-    ; initialize int values
-    mov ra, 0
-    mov r1, 1
-    mov [iv], ra
-    add ra, r1
-    mov [iv + 1], ra
-    add ra, r1
-    mov [iv + 2], ra
-    add ra, r1
-    mov [iv + 3], ra
-
-    ; initialize stack
-    mov r6, (2 ** 12)
-    mov r7, r6
-
-    ; call main
-    mov r5, ._entry_return
-    store r6, r5
-    jmp main
-._entry_return:
-    jmp _exit
-
-vram_offset: noop
-vram_size: noop
-
-clear_screen:
-    ; enter
-    add r6, [iv + 1]
-    store r6, r7
-    mov r7, r6
-    
-    ; let i = vram_offset
-    mov r2, (2 ** 11)
-    ; let m = vram_offset + vram_size
-    mov r3, ((2 ** 11) + (80 * 24) - 1)
-
-.continue:
-    mov ra, r3 ; m
-    lt ra, r2 ; m < i
-    jnz .break, ra
-
-    ; vram_offset[i] = ' '
-    mov ra, 65
-    store r2, ra
-
-    ; i++
-    add r2, [iv + 1]
-
-    jmp .continue
-.break:
-    ; return
-    mov r6, r7
-    load r7, r6
-    sub r6, [iv + 1]
-    load r5, r6
-    sub r6, [iv + 1]
-    jmp r5
-
-main:
-    ; enter
-    add r6, [iv + 1]
-    store r6, r7
-    mov r7, r6
-
-    mov [vram_offset], (2 ** 11)
-    mov [vram_size], (80 * 24)
-
-    add r6, [iv + 1]
-    mov r5, .return
-    store r6, r5
-    jmp clear_screen
-.return:
-
-    ; return
-    mov r6, r7
-    load r7, r6
-    sub r6, [iv + 1]
-    load r5, r6
-    sub r6, [iv + 1]
-    jmp r5
-
-_exit:
-    jmp (2 ** 14)
+
+; r5 = pointer
+; r6 = stack pointer
+; r7 = base stack pointer
+iv:
+    noop
+    noop
+    noop
+    noop
+    noop
+
+_entry:
+    ; initialize int values
+    mov ra, 0
+    mov r1, 1
+    mov [iv], ra
+    add ra, r1
+    mov [iv + 1], ra
+    add ra, r1
+    mov [iv + 2], ra
+    add ra, r1
+    mov [iv + 3], ra
+
+    ; initialize stack
+    mov r6, (2 ** 12)
+    mov r7, r6
+
+    ; call main
+    mov r5, ._entry_return
+    store r6, r5
+    jmp main
+._entry_return:
+    jmp _exit
+
+vram_offset: noop
+vram_size: noop
+
+clear_screen:
+    ; enter
+    add r6, [iv + 1]
+    store r6, r7
+    mov r7, r6
+    
+    ; let i = vram_offset
+    mov r2, (2 ** 11)
+    ; let m = vram_offset + vram_size
+    mov r3, ((2 ** 11) + (80 * 24) - 1)
+
+.continue:
+    mov ra, r3 ; m
+    lt ra, r2 ; m < i
+    jnz .break, ra
+
+    ; vram_offset[i] = ' '
+    mov ra, 65
+    store r2, ra
+
+    ; i++
+    add r2, [iv + 1]
+
+    jmp .continue
+.break:
+    ; return
+    mov r6, r7
+    load r7, r6
+    sub r6, [iv + 1]
+    load r5, r6
+    sub r6, [iv + 1]
+    jmp r5
+
+main:
+    ; enter
+    add r6, [iv + 1]
+    store r6, r7
+    mov r7, r6
+
+    mov [vram_offset], (2 ** 11)
+    mov [vram_size], (80 * 24)
+
+    add r6, [iv + 1]
+    mov r5, .return
+    store r6, r5
+    jmp clear_screen
+.return:
+
+    ; return
+    mov r6, r7
+    load r7, r6
+    sub r6, [iv + 1]
+    load r5, r6
+    sub r6, [iv + 1]
+    jmp r5
+
+_exit:
+    jmp (2 ** 14)
diff --git a/danskc/virtual-computer/assembler/examples/clear_regular.asm b/danskc/virtual_computer/assembler/examples/clear_regular.asm
similarity index 93%
rename from danskc/virtual-computer/assembler/examples/clear_regular.asm
rename to danskc/virtual_computer/assembler/examples/clear_regular.asm
index dbc8400..a35d160 100644
--- a/danskc/virtual-computer/assembler/examples/clear_regular.asm
+++ b/danskc/virtual_computer/assembler/examples/clear_regular.asm
@@ -1,111 +1,111 @@
-
-; r5 = pointer
-; r6 = stack pointer
-; r7 = base stack pointer
-iv:
-    noop
-    noop
-    noop
-    noop
-    noop
-
-_entry:
-    ; initialize int values
-    mov ra, 0
-    mov r1, 1
-    mov [iv], ra
-    add ra, r1
-    mov [iv + 1], ra
-    add ra, r1
-    mov [iv + 2], ra
-    add ra, r1
-    mov [iv + 3], ra
-
-    ; initialize stack
-    mov r6, (2 ** 12)
-    mov r7, r6
-
-    ; call main
-    mov r5, ._entry_return
-    store r6, r5
-    jmp main
-._entry_return:
-    jmp _exit
-
-vram_offset: noop
-vram_size: noop
-
-clear_screen:
-    ; enter
-    add r6, [iv + 1]
-    store r6, r7
-    mov r7, r6
-    ; allocate locals
-    add r6, [iv + 2]
-    
-    ; let i = 0
-    store r6, [iv + 0]
-    
-    ; let m = vram_size
-    mov r5, r6
-    sub r5, [iv + 1]
-    mov ra, [vram_size]
-    store r5, ra
-
-.continue:
-    ; i < m
-    load ra, r6 ; i
-    mov r5, r6
-    sub r5, [iv + 1]
-    load r1, r5 ; m
-    lt ra, r1
-    xor ra, [iv + 1]
-    jnz .break, ra
-
-    ; vram_offset[i] = ' '
-    load ra, r6 ; i
-    mov r5, [vram_offset]
-    add r5, ra
-    mov ra, 67
-    store r5, ra
-
-    ; i++
-    load ra, r6 ; i
-    add ra, [iv + 1]
-    store r6, ra
-
-    jmp .continue
-.break:
-    ; return
-    mov r6, r7
-    load r7, r6
-    sub r6, [iv + 1]
-    load r5, r6
-    sub r6, [iv + 1]
-    jmp r5
-
-main:
-    ; enter
-    add r6, [iv + 1]
-    store r6, r7
-    mov r7, r6
-
-    mov [vram_offset], (2 ** 11)
-    mov [vram_size], (80 * 24)
-
-    add r6, [iv + 1]
-    mov r5, .return
-    store r6, r5
-    jmp clear_screen
-.return:
-
-    ; return
-    mov r6, r7
-    load r7, r6
-    sub r6, [iv + 1]
-    load r5, r6
-    sub r6, [iv + 1]
-    jmp r5
-
-_exit:
-    jmp (2 ** 14)
+
+; r5 = pointer
+; r6 = stack pointer
+; r7 = base stack pointer
+iv:
+    noop
+    noop
+    noop
+    noop
+    noop
+
+_entry:
+    ; initialize int values
+    mov ra, 0
+    mov r1, 1
+    mov [iv], ra
+    add ra, r1
+    mov [iv + 1], ra
+    add ra, r1
+    mov [iv + 2], ra
+    add ra, r1
+    mov [iv + 3], ra
+
+    ; initialize stack
+    mov r6, (2 ** 12)
+    mov r7, r6
+
+    ; call main
+    mov r5, ._entry_return
+    store r6, r5
+    jmp main
+._entry_return:
+    jmp _exit
+
+vram_offset: noop
+vram_size: noop
+
+clear_screen:
+    ; enter
+    add r6, [iv + 1]
+    store r6, r7
+    mov r7, r6
+    ; allocate locals
+    add r6, [iv + 2]
+    
+    ; let i = 0
+    store r6, [iv + 0]
+    
+    ; let m = vram_size
+    mov r5, r6
+    sub r5, [iv + 1]
+    mov ra, [vram_size]
+    store r5, ra
+
+.continue:
+    ; i < m
+    load ra, r6 ; i
+    mov r5, r6
+    sub r5, [iv + 1]
+    load r1, r5 ; m
+    lt ra, r1
+    xor ra, [iv + 1]
+    jnz .break, ra
+
+    ; vram_offset[i] = ' '
+    load ra, r6 ; i
+    mov r5, [vram_offset]
+    add r5, ra
+    mov ra, 67
+    store r5, ra
+
+    ; i++
+    load ra, r6 ; i
+    add ra, [iv + 1]
+    store r6, ra
+
+    jmp .continue
+.break:
+    ; return
+    mov r6, r7
+    load r7, r6
+    sub r6, [iv + 1]
+    load r5, r6
+    sub r6, [iv + 1]
+    jmp r5
+
+main:
+    ; enter
+    add r6, [iv + 1]
+    store r6, r7
+    mov r7, r6
+
+    mov [vram_offset], (2 ** 11)
+    mov [vram_size], (80 * 24)
+
+    add r6, [iv + 1]
+    mov r5, .return
+    store r6, r5
+    jmp clear_screen
+.return:
+
+    ; return
+    mov r6, r7
+    load r7, r6
+    sub r6, [iv + 1]
+    load r5, r6
+    sub r6, [iv + 1]
+    jmp r5
+
+_exit:
+    jmp (2 ** 14)
diff --git a/danskc/virtual-computer/assembler/examples/clear_slow.asm b/danskc/virtual_computer/assembler/examples/clear_slow.asm
similarity index 93%
rename from danskc/virtual-computer/assembler/examples/clear_slow.asm
rename to danskc/virtual_computer/assembler/examples/clear_slow.asm
index 44debb1..f04cdda 100644
--- a/danskc/virtual-computer/assembler/examples/clear_slow.asm
+++ b/danskc/virtual_computer/assembler/examples/clear_slow.asm
@@ -1,99 +1,99 @@
-
-; r5 = pointer
-; r6 = stack pointer
-; r7 = base stack pointer
-iv:
-    noop
-    noop
-    noop
-    noop
-    noop
-
-_entry:
-    ; initialize int values
-    mov ra, 0
-    mov r1, 1
-    mov [iv], ra
-    add ra, r1
-    mov [iv + 1], ra
-    add ra, r1
-    mov [iv + 2], ra
-    add ra, r1
-    mov [iv + 3], ra
-
-    ; initialize stack
-    mov r6, (2 ** 12)
-    mov r7, r6
-
-    ; call main
-    mov r5, ._entry_return
-    store r6, r5
-    jmp main
-._entry_return:
-    jmp _exit
-
-vram_offset: noop
-vram_size: noop
-
-clear_screen:
-    ; enter
-    add r6, [iv + 1]
-    store r6, r7
-    mov r7, r6
-    
-    ; let i = 0
-    mov r2, 0
-    ; let m = vram_size
-    mov r3, [vram_size]
-
-.continue:
-    ; i < m
-    mov ra, r2 ; i
-    lt ra, r3
-    xor ra, [iv + 1]
-    jnz .break, ra
-
-    ; vram_offset[i] = ' '
-    mov r5, [vram_offset]
-    add r5, r2
-    mov ra, 66
-    store r5, ra
-
-    ; i++
-    add r2, [iv + 1]
-
-    jmp .continue
-.break:
-    ; return
-    mov r6, r7
-    load r7, r6
-    sub r6, [iv + 1]
-    load r5, r6
-    sub r6, [iv + 1]
-    jmp r5
-
-main:
-    ; enter
-    add r6, [iv + 1]
-    store r6, r7
-    mov r7, r6
-
-    mov [vram_offset], (2 ** 11)
-    mov [vram_size], (80 * 24)
-
-    add r6, [iv + 1]
-    mov r5, .return
-    store r6, r5
-    jmp clear_screen
-.return:
-
-    ; return
-    mov r6, r7
-    load r7, r6
-    sub r6, [iv + 1]
-    load r5, r6
-    sub r6, [iv + 1]
-    jmp r5
-
-_exit:
-    jmp (2 ** 14)
+
+; r5 = pointer
+; r6 = stack pointer
+; r7 = base stack pointer
+iv:
+    noop
+    noop
+    noop
+    noop
+    noop
+
+_entry:
+    ; initialize int values
+    mov ra, 0
+    mov r1, 1
+    mov [iv], ra
+    add ra, r1
+    mov [iv + 1], ra
+    add ra, r1
+    mov [iv + 2], ra
+    add ra, r1
+    mov [iv + 3], ra
+
+    ; initialize stack
+    mov r6, (2 ** 12)
+    mov r7, r6
+
+    ; call main
+    mov r5, ._entry_return
+    store r6, r5
+    jmp main
+._entry_return:
+    jmp _exit
+
+vram_offset: noop
+vram_size: noop
+
+clear_screen:
+    ; enter
+    add r6, [iv + 1]
+    store r6, r7
+    mov r7, r6
+    
+    ; let i = 0
+    mov r2, 0
+    ; let m = vram_size
+    mov r3, [vram_size]
+
+.continue:
+    ; i < m
+    mov ra, r2 ; i
+    lt ra, r3
+    xor ra, [iv + 1]
+    jnz .break, ra
+
+    ; vram_offset[i] = ' '
+    mov r5, [vram_offset]
+    add r5, r2
+    mov ra, 66
+    store r5, ra
+
+    ; i++
+    add r2, [iv + 1]
+
+    jmp .continue
+.break:
+    ; return
+    mov r6, r7
+    load r7, r6
+    sub r6, [iv + 1]
+    load r5, r6
+    sub r6, [iv + 1]
+    jmp r5
+
+main:
+    ; enter
+    add r6, [iv + 1]
+    store r6, r7
+    mov r7, r6
+
+    mov [vram_offset], (2 ** 11)
+    mov [vram_size], (80 * 24)
+
+    add r6, [iv + 1]
+    mov r5, .return
+    store r6, r5
+    jmp clear_screen
+.return:
+
+    ; return
+    mov r6, r7
+    load r7, r6
+    sub r6, [iv + 1]
+    load r5, r6
+    sub r6, [iv + 1]
+    jmp r5
+
+_exit:
+    jmp (2 ** 14)
diff --git a/danskc/virtual-computer/assembler/generator.py b/danskc/virtual_computer/assembler/generator.py
similarity index 100%
rename from danskc/virtual-computer/assembler/generator.py
rename to danskc/virtual_computer/assembler/generator.py
diff --git a/danskc/virtual-computer/assembler/parser.py b/danskc/virtual_computer/assembler/parser.py
similarity index 100%
rename from danskc/virtual-computer/assembler/parser.py
rename to danskc/virtual_computer/assembler/parser.py
diff --git a/danskc/virtual-computer/assembler/spec.py b/danskc/virtual_computer/assembler/spec.py
similarity index 100%
rename from danskc/virtual-computer/assembler/spec.py
rename to danskc/virtual_computer/assembler/spec.py
diff --git a/danskc/virtual-computer/assembler/symbols.py b/danskc/virtual_computer/assembler/symbols.py
similarity index 100%
rename from danskc/virtual-computer/assembler/symbols.py
rename to danskc/virtual_computer/assembler/symbols.py
-- 
2.25.1

