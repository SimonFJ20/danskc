From 40ce9e562052664fff8a105027fbb26f567dc7a1 Mon Sep 17 00:00:00 2001
From: Simon From Jakobsen <simonfromjakobsen@gmail.com>
Date: Thu, 3 Nov 2022 11:31:53 +0100
Subject: [PATCH] added 3 clear examples

---
 .../assembler/examples/clear_fast.asm         |  95 +++++++++++++++
 .../assembler/examples/clear_regular.asm      | 111 ++++++++++++++++++
 .../assembler/examples/clear_slow.asm         |  99 ++++++++++++++++
 3 files changed, 305 insertions(+)
 create mode 100644 danskc/virtual-computer/assembler/examples/clear_fast.asm
 create mode 100644 danskc/virtual-computer/assembler/examples/clear_regular.asm
 create mode 100644 danskc/virtual-computer/assembler/examples/clear_slow.asm

diff --git a/danskc/virtual-computer/assembler/examples/clear_fast.asm b/danskc/virtual-computer/assembler/examples/clear_fast.asm
new file mode 100644
index 0000000..4632b1e
--- /dev/null
+++ b/danskc/virtual-computer/assembler/examples/clear_fast.asm
@@ -0,0 +1,95 @@
+
+; r5 = pointer
+; r6 = stack pointer
+; r7 = base stack pointer
+iv:
+    noop
+    noop
+    noop
+    noop
+    noop
+
+_entry:
+    ; initialize int values
+    mov ra, 0
+    mov r1, 1
+    mov [iv], ra
+    add ra, r1
+    mov [iv + 1], ra
+    add ra, r1
+    mov [iv + 2], ra
+    add ra, r1
+    mov [iv + 3], ra
+
+    ; initialize stack
+    mov r6, (2 ** 12)
+    mov r7, r6
+
+    ; call main
+    mov r5, ._entry_return
+    store r6, r5
+    jmp main
+._entry_return:
+    jmp _exit
+
+vram_offset: noop
+vram_size: noop
+
+clear_screen:
+    ; enter
+    add r6, [iv + 1]
+    store r6, r7
+    mov r7, r6
+    
+    ; let i = vram_offset
+    mov r2, (2 ** 11)
+    ; let m = vram_offset + vram_size
+    mov r3, ((2 ** 11) + (80 * 24) - 1)
+
+.continue:
+    mov ra, r3 ; m
+    lt ra, r2 ; m < i
+    jnz .break, ra
+
+    ; vram_offset[i] = ' '
+    mov ra, 65
+    store r2, ra
+
+    ; i++
+    add r2, [iv + 1]
+
+    jmp .continue
+.break:
+    ; return
+    mov r6, r7
+    load r7, r6
+    sub r6, [iv + 1]
+    load r5, r6
+    sub r6, [iv + 1]
+    jmp r5
+
+main:
+    ; enter
+    add r6, [iv + 1]
+    store r6, r7
+    mov r7, r6
+
+    mov [vram_offset], (2 ** 11)
+    mov [vram_size], (80 * 24)
+
+    add r6, [iv + 1]
+    mov r5, .return
+    store r6, r5
+    jmp clear_screen
+.return:
+
+    ; return
+    mov r6, r7
+    load r7, r6
+    sub r6, [iv + 1]
+    load r5, r6
+    sub r6, [iv + 1]
+    jmp r5
+
+_exit:
+    jmp (2 ** 14)
diff --git a/danskc/virtual-computer/assembler/examples/clear_regular.asm b/danskc/virtual-computer/assembler/examples/clear_regular.asm
new file mode 100644
index 0000000..dbc8400
--- /dev/null
+++ b/danskc/virtual-computer/assembler/examples/clear_regular.asm
@@ -0,0 +1,111 @@
+
+; r5 = pointer
+; r6 = stack pointer
+; r7 = base stack pointer
+iv:
+    noop
+    noop
+    noop
+    noop
+    noop
+
+_entry:
+    ; initialize int values
+    mov ra, 0
+    mov r1, 1
+    mov [iv], ra
+    add ra, r1
+    mov [iv + 1], ra
+    add ra, r1
+    mov [iv + 2], ra
+    add ra, r1
+    mov [iv + 3], ra
+
+    ; initialize stack
+    mov r6, (2 ** 12)
+    mov r7, r6
+
+    ; call main
+    mov r5, ._entry_return
+    store r6, r5
+    jmp main
+._entry_return:
+    jmp _exit
+
+vram_offset: noop
+vram_size: noop
+
+clear_screen:
+    ; enter
+    add r6, [iv + 1]
+    store r6, r7
+    mov r7, r6
+    ; allocate locals
+    add r6, [iv + 2]
+    
+    ; let i = 0
+    store r6, [iv + 0]
+    
+    ; let m = vram_size
+    mov r5, r6
+    sub r5, [iv + 1]
+    mov ra, [vram_size]
+    store r5, ra
+
+.continue:
+    ; i < m
+    load ra, r6 ; i
+    mov r5, r6
+    sub r5, [iv + 1]
+    load r1, r5 ; m
+    lt ra, r1
+    xor ra, [iv + 1]
+    jnz .break, ra
+
+    ; vram_offset[i] = ' '
+    load ra, r6 ; i
+    mov r5, [vram_offset]
+    add r5, ra
+    mov ra, 67
+    store r5, ra
+
+    ; i++
+    load ra, r6 ; i
+    add ra, [iv + 1]
+    store r6, ra
+
+    jmp .continue
+.break:
+    ; return
+    mov r6, r7
+    load r7, r6
+    sub r6, [iv + 1]
+    load r5, r6
+    sub r6, [iv + 1]
+    jmp r5
+
+main:
+    ; enter
+    add r6, [iv + 1]
+    store r6, r7
+    mov r7, r6
+
+    mov [vram_offset], (2 ** 11)
+    mov [vram_size], (80 * 24)
+
+    add r6, [iv + 1]
+    mov r5, .return
+    store r6, r5
+    jmp clear_screen
+.return:
+
+    ; return
+    mov r6, r7
+    load r7, r6
+    sub r6, [iv + 1]
+    load r5, r6
+    sub r6, [iv + 1]
+    jmp r5
+
+_exit:
+    jmp (2 ** 14)
diff --git a/danskc/virtual-computer/assembler/examples/clear_slow.asm b/danskc/virtual-computer/assembler/examples/clear_slow.asm
new file mode 100644
index 0000000..44debb1
--- /dev/null
+++ b/danskc/virtual-computer/assembler/examples/clear_slow.asm
@@ -0,0 +1,99 @@
+
+; r5 = pointer
+; r6 = stack pointer
+; r7 = base stack pointer
+iv:
+    noop
+    noop
+    noop
+    noop
+    noop
+
+_entry:
+    ; initialize int values
+    mov ra, 0
+    mov r1, 1
+    mov [iv], ra
+    add ra, r1
+    mov [iv + 1], ra
+    add ra, r1
+    mov [iv + 2], ra
+    add ra, r1
+    mov [iv + 3], ra
+
+    ; initialize stack
+    mov r6, (2 ** 12)
+    mov r7, r6
+
+    ; call main
+    mov r5, ._entry_return
+    store r6, r5
+    jmp main
+._entry_return:
+    jmp _exit
+
+vram_offset: noop
+vram_size: noop
+
+clear_screen:
+    ; enter
+    add r6, [iv + 1]
+    store r6, r7
+    mov r7, r6
+    
+    ; let i = 0
+    mov r2, 0
+    ; let m = vram_size
+    mov r3, [vram_size]
+
+.continue:
+    ; i < m
+    mov ra, r2 ; i
+    lt ra, r3
+    xor ra, [iv + 1]
+    jnz .break, ra
+
+    ; vram_offset[i] = ' '
+    mov r5, [vram_offset]
+    add r5, r2
+    mov ra, 66
+    store r5, ra
+
+    ; i++
+    add r2, [iv + 1]
+
+    jmp .continue
+.break:
+    ; return
+    mov r6, r7
+    load r7, r6
+    sub r6, [iv + 1]
+    load r5, r6
+    sub r6, [iv + 1]
+    jmp r5
+
+main:
+    ; enter
+    add r6, [iv + 1]
+    store r6, r7
+    mov r7, r6
+
+    mov [vram_offset], (2 ** 11)
+    mov [vram_size], (80 * 24)
+
+    add r6, [iv + 1]
+    mov r5, .return
+    store r6, r5
+    jmp clear_screen
+.return:
+
+    ; return
+    mov r6, r7
+    load r7, r6
+    sub r6, [iv + 1]
+    load r5, r6
+    sub r6, [iv + 1]
+    jmp r5
+
+_exit:
+    jmp (2 ** 14)
-- 
2.25.1

