From 83891eef021e47f45fd86b87d0079f1647eba3b8 Mon Sep 17 00:00:00 2001
From: SimonFJ20 <simonfromjakobsen@gmail.com>
Date: Sun, 30 Oct 2022 22:45:15 +0100
Subject: [PATCH] asmmebler

---
 danskc/danskc.py                              |   2 +-
 danskc/virtual-computer/asm-grammar.txt       |  54 ++
 danskc/virtual-computer/assembler.py          |  20 +
 danskc/virtual-computer/assembler/__init__.py |   0
 danskc/virtual-computer/assembler/parser.py   | 489 ++++++++++++++++++
 danskc/virtual-computer/test.asm              |   4 +
 6 files changed, 568 insertions(+), 1 deletion(-)
 create mode 100644 danskc/virtual-computer/asm-grammar.txt
 create mode 100644 danskc/virtual-computer/assembler.py
 create mode 100644 danskc/virtual-computer/assembler/__init__.py
 create mode 100644 danskc/virtual-computer/assembler/parser.py
 create mode 100644 danskc/virtual-computer/test.asm

diff --git a/danskc/danskc.py b/danskc/danskc.py
index 46d7630..92b5dac 100644
--- a/danskc/danskc.py
+++ b/danskc/danskc.py
@@ -841,7 +841,7 @@ class Parser:
             return self.stepAndReturn(Bool(True))
         else:
             raise Exception(f"expected value, got {self.current()}")
-            
+
 
 def main() -> None:
     with open("test.dk") as file:
diff --git a/danskc/virtual-computer/asm-grammar.txt b/danskc/virtual-computer/asm-grammar.txt
new file mode 100644
index 0000000..a4786e5
--- /dev/null
+++ b/danskc/virtual-computer/asm-grammar.txt
@@ -0,0 +1,54 @@
+
+line -> label? operation?
+
+label -> Name ":"
+
+operation -> Name (operand ("," operand):*):?
+
+operand ->
+    | "(" expression ")"
+    | "[" expression "]"
+    | atom
+
+expression ->
+    | "(" expression ")"
+    | "!" expression
+    | atom "**" expression
+    | atom "*" expression
+    | atom "/" expression
+    | atom "%" expression
+    | atom "+" expression
+    | atom "-" expression
+    | atom "<<" expression
+    | atom ">>" expression
+    | atom "&" expression
+    | atom "^" expression
+    | atom "|" expression
+    | atom
+
+atom ->
+    | Name
+    | Int
+    | Hex
+
+Name:       /[a-zA-Z_][a-zA-Z0-9_]*/
+Int:        /0|[1-9][0-9]*/
+Hex:        /0[xX][0-9a-fA-F]+/
+Power:      "**"
+Plus:       "+"
+Minus:      "-"
+Asterisk:   "*"
+Slash:      "/"
+Percent:    "%"
+Exclamantion: "!"
+Ampersand:  "&"
+Hat:  "^"
+Pipe:       "|"
+DoubleLT:   "<<"
+DoubleGT:   ">>"
+LParen:     "("
+RParen:     ")"
+LBracket:   "["
+RBracket:   "]"
+Comma:      ","
+Colon:      ":"
diff --git a/danskc/virtual-computer/assembler.py b/danskc/virtual-computer/assembler.py
new file mode 100644
index 0000000..d0cda33
--- /dev/null
+++ b/danskc/virtual-computer/assembler.py
@@ -0,0 +1,20 @@
+from enum import Enum, auto
+from typing import Callable, Dict, List, Optional
+from assembler.parser import Line, parse_lines
+
+
+
+def assemble(text: str) -> str:
+    lines = parse_lines(text)
+    return "[\n" + ",".join([" ".join(line.to_json().split()) for line in lines]) + "\n]"
+
+if __name__ == "__main__":
+    from argparse import ArgumentParser
+    import sys
+    argparser = ArgumentParser()
+    argparser.add_argument("file")
+    args = argparser.parse_args()
+    with open(args.file) as file:
+        # print(assemble(file.read()), end="", flush=True)
+        print(assemble(file.read()))
+    
diff --git a/danskc/virtual-computer/assembler/__init__.py b/danskc/virtual-computer/assembler/__init__.py
new file mode 100644
index 0000000..e69de29
diff --git a/danskc/virtual-computer/assembler/parser.py b/danskc/virtual-computer/assembler/parser.py
new file mode 100644
index 0000000..3a84f1f
--- /dev/null
+++ b/danskc/virtual-computer/assembler/parser.py
@@ -0,0 +1,489 @@
+from enum import Enum, auto
+from typing import List, Optional
+
+class TokenType(Enum):
+    EOF = auto()
+    Name = auto()
+    Int = auto()
+    Hex = auto()
+    DoubleAsterisk = auto()
+    Plus = auto()
+    Minus = auto()
+    Asterisk = auto()
+    Slash = auto()
+    Percent = auto()
+    Exclamation = auto()
+    Ampersand = auto()
+    Hat = auto()
+    Pipe = auto()
+    DoubleLT = auto()
+    DoubleGT = auto()
+    LParen = auto()
+    RParen = auto()
+    LBracket = auto()
+    RBracket = auto()
+    Comma = auto()
+    Colon = auto()
+
+class Token:
+    def __init__(self, type: TokenType, value: str) -> None:
+        self.type = type
+        self.value = value
+    
+    def __str__(self) -> str:
+        return f"({self.type}, \"{self.value}\")"
+
+LETTERS = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
+DIGITS = "1234567890"
+HEX_DIGITS = DIGITS + "abcdefABCDEF"
+
+def tokenize(line: str) -> List[Token]:
+    tokens: List[Token] = []
+    i = 0
+    while i < len(line):
+        if line[i] in " \t\r\n":
+            i += 1
+        elif line[i] == ";":
+            i = len(line)
+        elif line[i] in LETTERS + "_.":
+            value = line[i]
+            i += 1
+            while i < len(line) and line[i] in LETTERS + DIGITS + "_":
+                value += line[i]
+                i += 1
+            tokens.append(Token(TokenType.Name, value))
+        elif line[i] in "123456789":
+            value = line[i]
+            i += 1
+            while line[i] in DIGITS:
+                value += line[i]
+                i += 1
+            tokens.append(Token(TokenType.Int, value))
+        elif line[i] == "0":
+            value = line[i]
+            i += 1
+            if line[i] in "xX":
+                i += 1
+                while line[i] in HEX_DIGITS:
+                    value += line[i]
+                    i += 1
+                tokens.append(Token(TokenType.Hex, value))
+            else:
+                tokens.append(Token(TokenType.Int, value))
+        elif line[i] == "*":
+            i += 1
+            if line[i] == "*":
+                i += 1
+                tokens.append(Token(TokenType.DoubleAsterisk, "**"))
+            else:
+                tokens.append(Token(TokenType.Asterisk, "*"))
+        elif line[i] == "+":
+            i += 1
+            tokens.append(Token(TokenType.Plus, "+"))
+        elif line[i] == "-":
+            i += 1
+            tokens.append(Token(TokenType.Minus, "-"))
+        elif line[i] == "/":
+            i += 1
+            tokens.append(Token(TokenType.Slash, "/"))
+        elif line[i] == "%":
+            i += 1
+            tokens.append(Token(TokenType.Percent, "%"))
+        elif line[i] == "!":
+            i += 1
+            tokens.append(Token(TokenType.Exclamation, "!"))
+        elif line[i] == "&":
+            i += 1
+            tokens.append(Token(TokenType.Ampersand, "&"))
+        elif line[i] == "|":
+            i += 1
+            tokens.append(Token(TokenType.Pipe, "|"))
+        elif line[i] == "<":
+            i += 1
+            if line[i] == "<":
+                i += 1
+                tokens.append(Token(TokenType.DoubleLT, "<<"))
+            else:
+                raise Exception("\'<\' (less than) not implemented")
+        elif line[i] == ">":
+            i += 1
+            if line[i] == ">":
+                i += 1
+                tokens.append(Token(TokenType.DoubleGT, ">>"))
+            else:
+                raise Exception("\'>\' (greater than) not implemented")
+        elif line[i] == "(":
+            i += 1
+            tokens.append(Token(TokenType.LParen, "("))
+        elif line[i] == ")":
+            i += 1
+            tokens.append(Token(TokenType.RParen, ")"))
+        elif line[i] == "[":
+            i += 1
+            tokens.append(Token(TokenType.LBracket, "["))
+        elif line[i] == "]":
+            i += 1
+            tokens.append(Token(TokenType.RBracket, "]"))
+        elif line[i] == ",":
+            i += 1
+            tokens.append(Token(TokenType.Comma, ","))
+        elif line[i] == ":":
+            i += 1
+            tokens.append(Token(TokenType.Colon, ":"))
+        else:
+            raise Exception(f"unexpected char \'{line[i]}\'")
+    tokens.append(Token(TokenType.EOF, ""))
+    return tokens
+
+class AtomType(Enum):
+    Name = auto()
+    Int = auto()
+    Hex = auto()
+
+class Atom:
+    def __init__(self) -> None:
+        self.atom_type: AtomType
+
+    def to_json(self) -> str:
+        raise NotImplementedError()
+
+class Name(Atom):
+    def __init__(self, value: str) -> None:
+        super().__init__()
+        self.atom_type = AtomType.Name
+        self.value = value
+
+    def to_json(self) -> str:
+        return f'''{{
+            "type": "atom",
+            "atomType": "name",
+            "value": "{self.value}"
+        }}'''
+
+class Int(Atom):
+    def __init__(self, value: str) -> None:
+        super().__init__()
+        self.atom_type = AtomType.Int
+        self.value = int(value)
+
+    def to_json(self) -> str:
+        return f'''{{
+            "type": "atom",
+            "atomType": "int",
+            "value": {self.value}
+        }}'''
+
+class Hex(Atom):
+    def __init__(self, value: str) -> None:
+        super().__init__()
+        self.atom_type = AtomType.Hex
+        self.value = int(value, 16)
+
+    def to_json(self) -> str:
+        return f'''{{
+            "type": "atom",
+            "atomType": "int",
+            "value": 0x{self.value}
+        }}'''
+
+class ExprType(Enum):
+    Binary = auto()
+    Not = auto()
+    Atom = auto()
+
+class Expr:
+    def __init__(self) -> None:
+        self.expr_type: ExprType
+
+    def to_json(self) -> str:
+        raise NotImplementedError()
+
+class BinaryType(Enum):
+    Add = auto()
+    Subtract = auto()
+    Multiply = auto()
+    Divide = auto()
+    Modolus = auto()
+    Power = auto()
+    And = auto()
+    Or = auto()
+    Xor = auto()
+    ShiftLeft = auto()
+    ShiftRight = auto()
+
+    def json_name(self):
+        if self == BinaryType.Add: return "add"
+        elif self == BinaryType.Subtract: return "subtract"
+        elif self == BinaryType.Multiply: return "multiply"
+        elif self == BinaryType.Divide: return "divide"
+        elif self == BinaryType.Modolus: return "modolus"
+        elif self == BinaryType.Power: return "power"
+        elif self == BinaryType.And: return "and"
+        elif self == BinaryType.Or: return "or"
+        elif self == BinaryType.Xor: return "xor"
+        elif self == BinaryType.ShiftLeft: return "shiftLeft"
+        elif self == BinaryType.ShiftRight: return "shiftRight"
+        else: raise Exception("unexhaustive map")
+
+class Binary(Expr):
+    def __init__(self, left: Expr, right: Expr, binary_type: BinaryType) -> None:
+        self.expr_type = ExprType.Binary
+        self.left = left
+        self.right = right
+        self.binary_type = binary_type
+        super().__init__()
+
+    def to_json(self) -> str:
+        return f'''{{
+            "type": "expr",
+            "exprType": "binary",
+            "binaryType": "{self.binary_type.json_name()}",
+            "left": {self.left.to_json()},
+            "right": {self.right.to_json()}
+        }}'''
+
+class Not(Expr):
+    def __init__(self, value: Expr) -> None:
+        super().__init__()
+        self.expr_type = ExprType.Not
+        self.value = value
+
+    def to_json(self) -> str:
+        return f'''{{
+            "type": "expr",
+            "exprType": "not",
+            "value": {self.value.to_json()}
+        }}'''
+
+class AtomExpr(Expr):
+    def __init__(self, value: Atom) -> None:
+        super().__init__()
+        self.expr_type = ExprType.Atom
+        self.value = value
+
+    def to_json(self) -> str:
+        return f'''{{
+            "type": "expr",
+            "exprType": "atom",
+            "value": {self.value.to_json()}
+        }}'''
+
+class OperandType(Enum):
+    Expr = auto()
+    Deref = auto()
+    Atom = auto()
+
+class Operand:
+    def __init__(self) -> None:
+        self.operand_type: OperandType
+
+    def to_json(self) -> str:
+        raise NotImplementedError()
+
+class EpxrOperand(Operand):
+    def __init__(self, value: Expr) -> None:
+        super().__init__()
+        self.operand_type = OperandType.Expr
+        self.value = value
+
+    def to_json(self) -> str:
+        return f'''{{
+            "type": "operand",
+            "operandType": "expr",
+            "value": {self.value.to_json()}
+        }}'''
+
+class DerefOperand(Operand):
+    def __init__(self, value: Expr) -> None:
+        super().__init__()
+        self.operand_type = OperandType.Deref
+        self.value = value
+
+    def to_json(self) -> str:
+        return f'''{{
+            "type": "operand",
+            "operandType": "deref",
+            "value": {self.value.to_json()}
+        }}'''
+
+class AtomOperand(Operand):
+    def __init__(self, value: Atom) -> None:
+        super().__init__()
+        self.operand_type = OperandType.Atom
+        self.value = value
+
+    def to_json(self) -> str:
+        return f'''{{
+            "type": "operand",
+            "operandType": "atom",
+            "value": {self.value.to_json()}
+        }}'''
+
+class Operation:
+    def __init__(self, operator: str, operands: List[Operand]) -> None:
+        self.operator = operator
+        self.operands = operands
+
+    def to_json(self) -> str:
+        operands = ", ".join([o.to_json() for o in self.operands])
+        return f'''{{
+            "type": "operation",
+            "operator": "{self.operator}",
+            "operands": [ {operands} ]
+        }}'''
+
+class Line:
+    def __init__(self, label: Optional[str], operation: Optional[Operation]) -> None:
+        self.label = label
+        self.operation = operation
+
+    def to_json(self) -> str:
+        label = f"\"{self.label}\"" if self.label else 'null'
+        operation = self.operation.to_json() if self.operation else 'null'
+        return f'''{{
+            "type": "line",
+            "label": {label},
+            "operation": {operation}
+        }}'''
+
+class Parser:
+    def __init__(self, tokens: List[Token]) -> None:
+        self.tokens = tokens
+        self.i = 0
+
+    def step(self) -> None:
+        self.i += 1
+
+    def current(self) -> Token:
+        return self.tokens[self.i]
+
+    def current_type(self) -> TokenType:
+        return self.current().type
+
+    def current_is(self, type: TokenType) -> bool:
+        return self.current_type() == type
+
+    def assert_current(self, type: TokenType):
+        if not self.current_is(type):
+            raise Exception(
+                f"unexpected token {self.current()}, expected {type}")
+
+    def done(self) -> bool:
+        return (self.i >= len(self.tokens) 
+            or self.current().type == TokenType.EOF)
+
+    def parse_line(self) -> Line:
+        label = self.maybe_parse_label()
+        operation = self.maybe_parse_operation()
+        return Line(label, operation)
+
+    def maybe_parse_label(self) -> Optional[str]:
+        if self.current_is(TokenType.Name):
+            value = self.current().value
+            self.step()
+            if self.current_is(TokenType.Colon):
+                self.step()
+                return value
+            else:
+                self.i -= 1
+                return None
+        else:
+            return None
+
+    def maybe_parse_operation(self) -> Optional[Operation]:
+        if self.done(): return None
+        self.assert_current(TokenType.Name)
+        operator = self.current().value
+        self.step()
+        operands: List[Operand] = []
+        if not self.done():
+            operands.append(self.parse_operand())
+            while not self.done():
+                self.assert_current(TokenType.Comma)
+                self.step()
+                operands.append(self.parse_operand())
+        return Operation(operator, operands)
+
+    def parse_operand(self) -> Operand:
+        if self.current_is(TokenType.LParen):
+            self.step()
+            value = self.parse_expression()
+            self.assert_current(TokenType.RParen)
+            self.step()
+            return EpxrOperand(value)
+        elif self.current_is(TokenType.LBracket):
+            self.step()
+            value = self.parse_expression()
+            self.assert_current(TokenType.RBracket)
+            self.step()
+            return DerefOperand(value)
+        else:
+            return AtomOperand(self.parse_atom())
+
+    def parse_expression(self) -> Expr:
+        if self.current_is(TokenType.LParen):
+            self.step()
+            value = self.parse_expression()
+            self.assert_current(TokenType.RParen)
+            self.step()
+            return value
+        elif self.current_is(TokenType.Exclamation):
+            self.step()
+            value = self.parse_expression()
+            return Not(value)
+        else:
+            left = AtomExpr(self.parse_atom())
+            if self.current_is(TokenType.DoubleAsterisk):
+                return self.make_binary(left, BinaryType.Power)
+            elif self.current_is(TokenType.Asterisk):
+                return self.make_binary(left, BinaryType.Multiply)
+            elif self.current_is(TokenType.Slash):
+                return self.make_binary(left, BinaryType.Divide)
+            elif self.current_is(TokenType.Percent):
+                return self.make_binary(left, BinaryType.Modolus)
+            elif self.current_is(TokenType.Plus):
+                return self.make_binary(left, BinaryType.Add)
+            elif self.current_is(TokenType.Minus):
+                return self.make_binary(left, BinaryType.Subtract)
+            elif self.current_is(TokenType.DoubleLT):
+                return self.make_binary(left, BinaryType.ShiftLeft)
+            elif self.current_is(TokenType.DoubleGT):
+                return self.make_binary(left, BinaryType.ShiftRight)
+            elif self.current_is(TokenType.Ampersand):
+                return self.make_binary(left, BinaryType.And)
+            elif self.current_is(TokenType.Hat):
+                return self.make_binary(left, BinaryType.Xor)
+            elif self.current_is(TokenType.Pipe):
+                return self.make_binary(left, BinaryType.Or)
+            else:
+                return left
+
+    def make_binary(self, left: Expr, binary_type: BinaryType):
+        self.step()
+        right = self.parse_expression()
+        return Binary(left, right, binary_type)
+
+    def parse_atom(self) -> Atom:
+        if self.current_is(TokenType.Name):
+            value = self.current().value
+            self.step()
+            return Name(value)
+        elif self.current_is(TokenType.Int):
+            value = self.current().value
+            self.step()
+            return Int(value)
+        elif self.current_is(TokenType.Hex):
+            value = self.current().value
+            self.step()
+            return Hex(value)
+        else:
+            raise Exception(f"expected atom, got {self.current()}")
+
+def parse_lines(text: str) -> List[Line]:
+    lines = [line for line in text.split("\n") if line != ""]
+    parsed_lines: List[Line] = []
+    for line in lines:
+        tokens = tokenize(line)
+        if len(tokens) <= 1: continue
+        parsed_lines.append(Parser(tokens).parse_line())
+    return parsed_lines
diff --git a/danskc/virtual-computer/test.asm b/danskc/virtual-computer/test.asm
new file mode 100644
index 0000000..2e1cbfc
--- /dev/null
+++ b/danskc/virtual-computer/test.asm
@@ -0,0 +1,4 @@
+
+.local: mov a, b
+lobal: mov a, [ (1 + (2 * 3))]
+mov a, b
-- 
2.25.1

