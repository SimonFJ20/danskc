From b0563fd4d1e12fb507a53f0f5d2ab44ac67fecc4 Mon Sep 17 00:00:00 2001
From: SimonFJ20 <simonfromjakobsen@gmail.com>
Date: Thu, 3 Nov 2022 00:33:19 +0100
Subject: [PATCH] somthing not right

---
 danskc/virtual-computer/assembler.py          |  37 +-----
 danskc/virtual-computer/assembler/checker.py  | 125 ++++++++++++++++++
 .../virtual-computer/assembler/generator.py   |  78 +++++++++++
 danskc/virtual-computer/assembler/parser.py   | 100 +++++++++++---
 danskc/virtual-computer/assembler/spec.py     |  12 ++
 danskc/virtual-computer/assembler/symbols.py  |  30 +++--
 danskc/virtual-computer/test.asm              | 121 ++++++++++++++++-
 danskc/virtual-computer/test2.asm             |  20 +++
 8 files changed, 452 insertions(+), 71 deletions(-)
 create mode 100644 danskc/virtual-computer/assembler/checker.py
 create mode 100644 danskc/virtual-computer/assembler/generator.py
 create mode 100644 danskc/virtual-computer/assembler/spec.py
 create mode 100644 danskc/virtual-computer/test2.asm

diff --git a/danskc/virtual-computer/assembler.py b/danskc/virtual-computer/assembler.py
index 137d4a7..432e34d 100644
--- a/danskc/virtual-computer/assembler.py
+++ b/danskc/virtual-computer/assembler.py
@@ -1,40 +1,15 @@
-from typing import List
-from assembler.symbols import SymbolTable, find_symbols
-from assembler.parser import Line, Operation, parse_lines
-
-def check_operations(operations: List[Operation], symbols: SymbolTable) -> None:
-    for operation in operations:
-        if operation.operator == "noop":
-            if len(operation.operands) != 0:
-                raise Exception(f"\"{len(operation.operands)}\" instruction expects 0 arguments, {len(operation.operands)} was given")
-        elif operation.operator == "jmp":
-            if len(operation.operands) != 1:
-                raise Exception(f"\"{len(operation.operands)}\" instruction expects 1 argument, {len(operation.operands)} was given")
-        elif operation.operator == "jnz":
-            if len(operation.operands) != 2:
-                raise Exception(f"\"{len(operation.operands)}\" instruction expects 2 arguments, {len(operation.operands)} was given")
-        elif operation.operator == "mov":
-            if len(operation.operands) != 2:
-                raise Exception(f"\"{len(operation.operands)}\" instruction expects 2 arguments, {len(operation.operands)} was given")
-        elif operation.operator == "load":
-            if len(operation.operands) != 2:
-                raise Exception(f"\"{len(operation.operands)}\" instruction expects 2 arguments, {len(operation.operands)} was given")
-        elif operation.operator == "store":
-            if len(operation.operands) != 2:
-                raise Exception(f"\"{len(operation.operands)}\" instruction expects 2 arguments, {len(operation.operands)} was given")
-        elif operation.operator in ["and", "or", "xor", "add", "sub", "mul", "div", "mod", "shl", "cmp", "lt"]:
-            if len(operation.operands) != 2:
-                raise Exception(f"\"{len(operation.operands)}\" instruction expects 2 arguments, {len(operation.operands)} was given")
-        else:
-            raise Exception(f"unknown instruction \"{operation.operator}\"")
-
+from assembler.parser import parse_lines
+from assembler.symbols import find_symbols
+from assembler.checker import check_lines
+from assembler.generator import generate_lines
 
 
 def assemble(text: str) -> str:
     lines = parse_lines(text)
     symbols = find_symbols(lines)
-    # return "[\n" + ",".join([" ".join(line.to_json().split()) for line in lines]) + "\n]"
     lines = [line for line in lines if line.operation]
+    check_lines(lines, symbols)
+    return generate_lines(lines, symbols)
 
 if __name__ == "__main__":
     from argparse import ArgumentParser
diff --git a/danskc/virtual-computer/assembler/checker.py b/danskc/virtual-computer/assembler/checker.py
new file mode 100644
index 0000000..120e0bc
--- /dev/null
+++ b/danskc/virtual-computer/assembler/checker.py
@@ -0,0 +1,125 @@
+from typing import List, cast
+from assembler.parser import (AtomExpr, AtomOperand, AtomType, Binary,
+                              DerefOperand, ExprOperand, Expr, ExprType, Hex,
+                              Int, Line, Name, Not, Operand, OperandType,
+                              Operation, parse_lines)
+from assembler.symbols import SymbolTable, find_symbols
+
+
+def checker_error(message: str, line_number: int) -> None:
+    raise Exception(f"checker error on line {line_number}:\n{message}\n")
+
+def check_operand_count(operation: Operation, line_number: int, expected_count: int) -> None:
+    if len(operation.operands) != expected_count:
+        checker_error(
+            f"\"{operation.operator}\" expects {expected_count} operands, got {len(operation.operands)}",
+            line_number,
+        )
+
+def is_register(name: str) -> bool:
+    return name in ["ra", "r1", "r2", "r3", "r4", "r5", "r6", "r7", "r8"]
+
+def check_expression(expr: Expr, symbols: SymbolTable, line_number: int) -> None:
+    if expr.expr_type == ExprType.Binary:
+        binary = cast(Binary, expr)
+        check_expression(binary.left, symbols, line_number)
+        check_expression(binary.right, symbols, line_number)
+    elif expr.expr_type == ExprType.Not:
+        not_expr = cast(Not, expr)
+        check_expression(not_expr.value, symbols, line_number)
+    elif expr.expr_type == ExprType.Atom:
+        atom = cast(AtomExpr, expr).value
+        if atom.atom_type == AtomType.Name:
+            name_atom = cast(Name, atom)
+            if not symbols.is_defined(name_atom.value) and not is_register(name_atom.value):
+                checker_error(f"symbol \"{name_atom.value}\" is not defined", line_number)
+    else:
+        raise Exception("unexhaustive match")
+
+def check_address(operation: Operation, i: int, symbols: SymbolTable, line_number: int) -> None:
+    operand = operation.operands[i]
+    if operand.operand_type == OperandType.Expr:
+        checker_error(f"expected address as operand {i+1} of \"{operation.operator}\" instruction", line_number)
+    elif operand.operand_type == OperandType.Deref:
+        check_expression(cast(DerefOperand, operand).value, symbols, line_number)
+    elif operand.operand_type == OperandType.Atom:
+        atom = cast(AtomOperand, operand).value
+        if atom.atom_type == AtomType.Name:
+            name_atom = cast(Name, atom)
+            if not symbols.is_defined(name_atom.value) and not is_register(name_atom.value):
+                checker_error(f"symbol \"{name_atom.value}\" is not defined", line_number)
+        else:
+            checker_error(f"expected address as operand {i+1} of \"{operation.operator}\" instruction", line_number)
+    else:
+        raise Exception("unexhaustive match")
+
+def check_value(operation: Operation, i: int, symbols: SymbolTable, line_number: int) -> None:
+    operand = operation.operands[i]
+    if operand.operand_type == OperandType.Expr:
+        check_expression(cast(ExprOperand, operand).value, symbols, line_number)
+    elif operand.operand_type == OperandType.Deref:
+        checker_error(f"expected expression as operand {i+1} of \"{operation.operator}\" instruction", line_number)
+    elif operand.operand_type == OperandType.Atom:
+        atom = cast(AtomOperand, operand).value
+        if atom.atom_type == AtomType.Name:
+            name_atom = cast(Name, atom)
+            if not symbols.is_defined(name_atom.value):
+                checker_error(f"symbol \"{name_atom.value}\" is not defined", line_number)
+    else:
+        raise Exception("unexhaustive match")
+
+def check_address_or_value(operation: Operation, i: int, symbols: SymbolTable, line_number: int) -> None:
+    operand = operation.operands[i]
+    if operand.operand_type == OperandType.Expr:
+        check_expression(cast(ExprOperand, operand).value, symbols, line_number)
+    elif operand.operand_type == OperandType.Deref:
+        check_expression(cast(DerefOperand, operand).value, symbols, line_number)
+    elif operand.operand_type == OperandType.Atom:
+        atom = cast(AtomOperand, operand).value
+        if atom.atom_type == AtomType.Name:
+            name_atom = cast(Name, atom)
+            if not symbols.is_defined(name_atom.value) and not is_register(name_atom.value):
+                checker_error(f"symbol \"{name_atom.value}\" is not defined", line_number)
+    else:
+        raise Exception("unexhaustive match")
+
+
+def check_operation(operation: Operation, symbols: SymbolTable, line_number: int) -> None:
+    if operation.operator == "noop":
+        check_operand_count(operation, line_number, 0)
+
+    elif operation.operator == "jmp":
+        check_operand_count(operation, line_number, 1)
+        check_address(operation, 0, symbols, line_number)
+
+    elif operation.operator == "jnz":
+        check_operand_count(operation, line_number, 2)
+        check_address(operation, 0, symbols, line_number)
+        check_address(operation, 1, symbols, line_number)
+
+    elif operation.operator == "mov":
+        check_operand_count(operation, line_number, 2)
+        check_address(operation, 0, symbols, line_number)
+
+    elif operation.operator == "load":
+        check_operand_count(operation, line_number, 2)
+        check_address(operation, 0, symbols, line_number)
+        check_address(operation, 1, symbols, line_number)
+
+    elif operation.operator == "store":
+        check_operand_count(operation, line_number, 2)
+        check_address(operation, 0, symbols, line_number)
+        check_address(operation, 1, symbols, line_number)
+
+    elif operation.operator in ["and", "or", "xor", "add", "sub", "mul", "div", "mod", "shl", "cmp", "lt"]:
+        check_operand_count(operation, line_number, 2)
+        check_address(operation, 0, symbols, line_number)
+        check_address(operation, 1, symbols, line_number)
+    
+    else:
+        checker_error(f"unknown instruction \"{operation.operator}\"", line_number)
+
+def check_lines(lines: List[Line], symbols: SymbolTable) -> None:
+    for line in lines:
+        if not line.operation: continue
+        check_operation(line.operation, symbols, line.line_number)
diff --git a/danskc/virtual-computer/assembler/generator.py b/danskc/virtual-computer/assembler/generator.py
new file mode 100644
index 0000000..418eda0
--- /dev/null
+++ b/danskc/virtual-computer/assembler/generator.py
@@ -0,0 +1,78 @@
+from typing import List, cast
+from assembler.parser import AtomExpr, AtomOperand, AtomType, Binary, BinaryType, DerefOperand, ExprOperand, Expr, ExprType, Int, Line, Name, Not, Operand, OperandType, Operation, parse_lines
+from assembler.symbols import SymbolTable, find_symbols, instruction_size
+from assembler.checker import check_operation, is_register
+from assembler.spec import PROGRAM_START
+
+def evaluate_expression(expr: Expr, symbols: SymbolTable, lc: int) -> int:
+    if expr.expr_type == ExprType.Binary:
+        binary = cast(Binary, expr)
+        left = evaluate_expression(binary.left, symbols, lc)
+        right = evaluate_expression(binary.right, symbols, lc)
+        if binary.binary_type == BinaryType.Add:            return left + right
+        elif binary.binary_type == BinaryType.Subtract:     return left - right
+        elif binary.binary_type == BinaryType.Multiply:     return left * right
+        elif binary.binary_type == BinaryType.Divide:       return int(left / right)
+        elif binary.binary_type == BinaryType.Modolus:      return left % right
+        elif binary.binary_type == BinaryType.Power:        return left ** right
+        elif binary.binary_type == BinaryType.And:          return left & right
+        elif binary.binary_type == BinaryType.Or:           return left | right
+        elif binary.binary_type == BinaryType.Xor:          return left ^ right
+        elif binary.binary_type == BinaryType.ShiftLeft:    return left << right
+        elif binary.binary_type == BinaryType.ShiftRight:   return left >> right
+        else: raise Exception("unexhaustive match")
+    elif expr.expr_type == ExprType.Not:
+        not_expr = cast(Not, expr)
+        return not evaluate_expression(not_expr.value, symbols, lc)
+    elif expr.expr_type == ExprType.Atom:
+        atom = cast(AtomExpr, expr).value
+        if atom.atom_type == AtomType.Name:
+            return symbols.get(cast(Name, atom).value, lc)
+        elif atom.atom_type == AtomType.Int:
+            return cast(Int, atom).value
+        elif atom.atom_type == AtomType.Hex:
+            return cast(Int, atom).value
+        else:
+            raise Exception("unexhaustive match")
+    else:
+        raise Exception("unexhaustive match")
+
+def generate_operand(operand: Operand, symbols: SymbolTable, lc: int) -> str:
+    if operand.operand_type == OperandType.Expr:
+        return f"{evaluate_expression(cast(ExprOperand, operand).value, symbols, lc)}"
+    elif operand.operand_type == OperandType.Deref:
+        return f"&{evaluate_expression(cast(ExprOperand, operand).value, symbols, lc)}"
+    elif operand.operand_type == OperandType.Atom:
+        atom = cast(AtomOperand, operand).value
+        if atom.atom_type == AtomType.Name:
+            name = cast(Name, atom).value
+            if is_register(name):
+                return name
+            else:
+                return str(symbols.get(name, lc))
+        elif atom.atom_type == AtomType.Int:
+            return str(cast(Int, atom).value)
+        elif atom.atom_type == AtomType.Hex:
+            return str(cast(Int, atom).value)
+        else:
+            raise Exception("unexhaustive match")
+    else:
+        raise Exception("unexhaustive match")
+
+def generate_operation(operation: Operation, symbols: SymbolTable, lc: int) -> str:
+    operator = operation.operator
+    operands = " ".join(map(lambda operand: generate_operand(operand, symbols, lc), operation.operands))
+    return f"{operator} {operands}"
+
+def generate_operations(operations: List[Operation], symbols: SymbolTable) -> str:
+    generated_lines: List[str] = []
+    lc = PROGRAM_START
+    for operation in operations:
+        generated_lines.append(f"; {lc}: {operation}")
+        generated_lines.append(generate_operation(operation, symbols, lc))
+        lc += instruction_size(operation.operator)
+    return "\n".join(generated_lines)
+
+def generate_lines(lines: List[Line], symbols: SymbolTable) -> str:
+    operations = [line.operation for line in lines if line.operation]
+    return generate_operations(operations, symbols)
diff --git a/danskc/virtual-computer/assembler/parser.py b/danskc/virtual-computer/assembler/parser.py
index 3a84f1f..af7af99 100644
--- a/danskc/virtual-computer/assembler/parser.py
+++ b/danskc/virtual-computer/assembler/parser.py
@@ -55,14 +55,14 @@ def tokenize(line: str) -> List[Token]:
         elif line[i] in "123456789":
             value = line[i]
             i += 1
-            while line[i] in DIGITS:
+            while i < len(line) and line[i] in DIGITS:
                 value += line[i]
                 i += 1
             tokens.append(Token(TokenType.Int, value))
         elif line[i] == "0":
             value = line[i]
             i += 1
-            if line[i] in "xX":
+            if i < len(line) and line[i] in "xX":
                 i += 1
                 while line[i] in HEX_DIGITS:
                     value += line[i]
@@ -144,6 +144,9 @@ class Atom:
     def __init__(self) -> None:
         self.atom_type: AtomType
 
+    def __str__(self) -> str:
+        raise NotImplementedError()
+
     def to_json(self) -> str:
         raise NotImplementedError()
 
@@ -153,6 +156,9 @@ class Name(Atom):
         self.atom_type = AtomType.Name
         self.value = value
 
+    def __str__(self) -> str:
+        return f"{self.value}"
+
     def to_json(self) -> str:
         return f'''{{
             "type": "atom",
@@ -166,6 +172,9 @@ class Int(Atom):
         self.atom_type = AtomType.Int
         self.value = int(value)
 
+    def __str__(self) -> str:
+        return f"{self.value}"
+
     def to_json(self) -> str:
         return f'''{{
             "type": "atom",
@@ -179,6 +188,9 @@ class Hex(Atom):
         self.atom_type = AtomType.Hex
         self.value = int(value, 16)
 
+    def __str__(self) -> str:
+        return f"{self.value}"
+
     def to_json(self) -> str:
         return f'''{{
             "type": "atom",
@@ -195,6 +207,9 @@ class Expr:
     def __init__(self) -> None:
         self.expr_type: ExprType
 
+    def __str__(self) -> str:
+        raise NotImplementedError()
+
     def to_json(self) -> str:
         raise NotImplementedError()
 
@@ -211,6 +226,20 @@ class BinaryType(Enum):
     ShiftLeft = auto()
     ShiftRight = auto()
 
+    def chars(self):
+        if self == BinaryType.Add: return "+"
+        elif self == BinaryType.Subtract: return "-"
+        elif self == BinaryType.Multiply: return "*"
+        elif self == BinaryType.Divide: return "/"
+        elif self == BinaryType.Modolus: return "%"
+        elif self == BinaryType.Power: return "**"
+        elif self == BinaryType.And: return "&"
+        elif self == BinaryType.Or: return "|"
+        elif self == BinaryType.Xor: return "^"
+        elif self == BinaryType.ShiftLeft: return "<<"
+        elif self == BinaryType.ShiftRight: return ">>"
+        else: raise Exception("unexhaustive map")
+
     def json_name(self):
         if self == BinaryType.Add: return "add"
         elif self == BinaryType.Subtract: return "subtract"
@@ -233,6 +262,9 @@ class Binary(Expr):
         self.binary_type = binary_type
         super().__init__()
 
+    def __str__(self) -> str:
+        return f"({self.left} {self.binary_type.chars()} {self.right})"
+
     def to_json(self) -> str:
         return f'''{{
             "type": "expr",
@@ -248,6 +280,9 @@ class Not(Expr):
         self.expr_type = ExprType.Not
         self.value = value
 
+    def __str__(self) -> str:
+        return f"(~{self.value})"
+
     def to_json(self) -> str:
         return f'''{{
             "type": "expr",
@@ -261,6 +296,9 @@ class AtomExpr(Expr):
         self.expr_type = ExprType.Atom
         self.value = value
 
+    def __str__(self) -> str:
+        return f"{self.value}"
+
     def to_json(self) -> str:
         return f'''{{
             "type": "expr",
@@ -277,15 +315,21 @@ class Operand:
     def __init__(self) -> None:
         self.operand_type: OperandType
 
+    def __str__(self) -> str:
+        raise NotImplementedError()
+
     def to_json(self) -> str:
         raise NotImplementedError()
 
-class EpxrOperand(Operand):
+class ExprOperand(Operand):
     def __init__(self, value: Expr) -> None:
         super().__init__()
         self.operand_type = OperandType.Expr
         self.value = value
 
+    def __str__(self) -> str:
+        return f"({self.value})"
+
     def to_json(self) -> str:
         return f'''{{
             "type": "operand",
@@ -299,6 +343,9 @@ class DerefOperand(Operand):
         self.operand_type = OperandType.Deref
         self.value = value
 
+    def __str__(self) -> str:
+        return f"[{self.value}]"
+
     def to_json(self) -> str:
         return f'''{{
             "type": "operand",
@@ -312,6 +359,9 @@ class AtomOperand(Operand):
         self.operand_type = OperandType.Atom
         self.value = value
 
+    def __str__(self) -> str:
+        return f"{self.value}"
+
     def to_json(self) -> str:
         return f'''{{
             "type": "operand",
@@ -324,6 +374,9 @@ class Operation:
         self.operator = operator
         self.operands = operands
 
+    def __str__(self) -> str:
+        return f"{self.operator} {', '.join(str(o) for o in self.operands)}"
+
     def to_json(self) -> str:
         operands = ", ".join([o.to_json() for o in self.operands])
         return f'''{{
@@ -333,9 +386,10 @@ class Operation:
         }}'''
 
 class Line:
-    def __init__(self, label: Optional[str], operation: Optional[Operation]) -> None:
+    def __init__(self, label: Optional[str], operation: Optional[Operation], line_number: int) -> None:
         self.label = label
         self.operation = operation
+        self.line_number = line_number
 
     def to_json(self) -> str:
         label = f"\"{self.label}\"" if self.label else 'null'
@@ -343,7 +397,8 @@ class Line:
         return f'''{{
             "type": "line",
             "label": {label},
-            "operation": {operation}
+            "operation": {operation},
+            "lineNumbr": {self.line_number}
         }}'''
 
 class Parser:
@@ -372,10 +427,10 @@ class Parser:
         return (self.i >= len(self.tokens) 
             or self.current().type == TokenType.EOF)
 
-    def parse_line(self) -> Line:
+    def parse_line(self, line_number: int) -> Line:
         label = self.maybe_parse_label()
         operation = self.maybe_parse_operation()
-        return Line(label, operation)
+        return Line(label, operation, line_number)
 
     def maybe_parse_label(self) -> Optional[str]:
         if self.current_is(TokenType.Name):
@@ -406,11 +461,8 @@ class Parser:
 
     def parse_operand(self) -> Operand:
         if self.current_is(TokenType.LParen):
-            self.step()
             value = self.parse_expression()
-            self.assert_current(TokenType.RParen)
-            self.step()
-            return EpxrOperand(value)
+            return ExprOperand(value)
         elif self.current_is(TokenType.LBracket):
             self.step()
             value = self.parse_expression()
@@ -421,18 +473,12 @@ class Parser:
             return AtomOperand(self.parse_atom())
 
     def parse_expression(self) -> Expr:
-        if self.current_is(TokenType.LParen):
-            self.step()
-            value = self.parse_expression()
-            self.assert_current(TokenType.RParen)
-            self.step()
-            return value
-        elif self.current_is(TokenType.Exclamation):
+        if self.current_is(TokenType.Exclamation):
             self.step()
             value = self.parse_expression()
             return Not(value)
         else:
-            left = AtomExpr(self.parse_atom())
+            left = self.parse_group()
             if self.current_is(TokenType.DoubleAsterisk):
                 return self.make_binary(left, BinaryType.Power)
             elif self.current_is(TokenType.Asterisk):
@@ -463,6 +509,16 @@ class Parser:
         right = self.parse_expression()
         return Binary(left, right, binary_type)
 
+    def parse_group(self) -> Expr:
+        if self.current_is(TokenType.LParen):
+            self.step()
+            value = self.parse_expression()
+            self.assert_current(TokenType.RParen)
+            self.step()
+            return value
+        else:
+            return AtomExpr(self.parse_atom())
+
     def parse_atom(self) -> Atom:
         if self.current_is(TokenType.Name):
             value = self.current().value
@@ -480,10 +536,10 @@ class Parser:
             raise Exception(f"expected atom, got {self.current()}")
 
 def parse_lines(text: str) -> List[Line]:
-    lines = [line for line in text.split("\n") if line != ""]
     parsed_lines: List[Line] = []
-    for line in lines:
+    for i, line in enumerate(text.split("\n")):
+        if line == "": continue
         tokens = tokenize(line)
         if len(tokens) <= 1: continue
-        parsed_lines.append(Parser(tokens).parse_line())
+        parsed_lines.append(Parser(tokens).parse_line(i))
     return parsed_lines
diff --git a/danskc/virtual-computer/assembler/spec.py b/danskc/virtual-computer/assembler/spec.py
new file mode 100644
index 0000000..5104153
--- /dev/null
+++ b/danskc/virtual-computer/assembler/spec.py
@@ -0,0 +1,12 @@
+
+PROGRAM_START = 64
+
+def instruction_size(operator: str) -> int:
+    if operator == "noop":
+        return 1
+    elif operator in ["jmp"]:
+        return 2
+    elif operator in ["jnz", "mov", "and", "or", "xor", "add", "sub", "mul", "div", "mod", "shl", "cmp", "lt", "load", "store"]:
+        return 3
+    else:
+        raise Exception(f"unknown instruction \"{operator}\"")
diff --git a/danskc/virtual-computer/assembler/symbols.py b/danskc/virtual-computer/assembler/symbols.py
index ff9c012..782a26e 100644
--- a/danskc/virtual-computer/assembler/symbols.py
+++ b/danskc/virtual-computer/assembler/symbols.py
@@ -1,11 +1,26 @@
-from typing import Dict, List
+from typing import Dict, List, Optional, cast
 from assembler.parser import Line
+from assembler.spec import PROGRAM_START, instruction_size
 
 class SymbolTable:
     def __init__(self, global_symbols: Dict[str, int], local_symbols: Dict[str, List[int]]) -> None:
         self.global_symbols = global_symbols
         self.local_symbols = local_symbols
+
+    def is_defined(self, name: str) -> bool:
+        return name in self.global_symbols or name in self.local_symbols
     
+    def get(self, name: str, lc: int) -> int:
+        assert self.is_defined(name)
+        if name.startswith("."):
+            closest: Optional[int] = None
+            for l in self.local_symbols[name]:
+                if not closest or abs(closest - lc) > abs(l - lc):
+                    closest = l
+            assert closest != None
+            return cast(int, closest)    
+        else:
+            return self.global_symbols[name]
 
 class SymbolTableBuilder:
     def __init__(self) -> None:
@@ -25,20 +40,9 @@ class SymbolTableBuilder:
             raise Exception(f"multiple defitions of symbol \"{name}\"")
         self.global_symbols[name] = lc
 
-def instruction_size(operator: str) -> int:
-    if operator == "noop":
-        return 1
-    elif operator in ["jmp", "jnz"]:
-        return 2
-    elif operator in ["mov", "and", "or", "xor", "add", "sub", "mul", "div", "mod", "shl", "cmp", "lt", "load", "store"]:
-        return 3
-    else:
-        raise Exception(f"unknown instruction \"{operator}\"")
-
-
 def find_symbols(lines: List[Line]) -> SymbolTable:
     symbols = SymbolTableBuilder()
-    lc = 0
+    lc = PROGRAM_START
     for line in lines:
         if line.label:
             if line.label.startswith("."):
diff --git a/danskc/virtual-computer/test.asm b/danskc/virtual-computer/test.asm
index 44bed47..153aa3b 100644
--- a/danskc/virtual-computer/test.asm
+++ b/danskc/virtual-computer/test.asm
@@ -1,6 +1,117 @@
 
-.local: mov a, b
-.local: mov a, b
-.local: mov a, b
-lobal: mov a, [ (1 + (2 * 3))]
-mov a, b
+; r5 = pointer
+; r6 = stack pointer
+; r7 = base stack pointer
+iv:
+    noop
+    noop
+    noop
+    noop
+    noop
+
+_entry:
+    ; initialize int values
+    mov ra, 0
+    mov r1, 1
+    mov [iv], ra
+    add ra, r1
+    mov [iv + 1], ra
+    add ra, r1
+    mov [iv + 2], ra
+    add ra, r1
+    mov [iv + 3], ra
+    add ra, r1
+    mov [iv + 1], ra
+
+    ; initialize stack
+    mov r6, (2 ** 12)
+
+    ; call main
+    mov r5, ._entry_return
+    store r6, r5
+    mov r5, main
+    jmp r5
+._entry_return:
+    mov r5, _exit
+    jmp r5
+
+vram_offset: noop
+vram_size: noop
+
+clear_screen:
+    ; enter
+    add r6, [iv + 1]
+    store r6, r7
+    mov r7, r6
+    ; allocate stack frame
+    add r6, [iv + 2]
+    
+    ; let i = 0
+    store r6, [iv + 0]
+    
+    ; let m = vram_size
+    mov r5, r6
+    sub r5, [iv + 1]
+    mov ra, [vram_size]
+    store r5, ra
+
+.loop_continue:
+    ; i < m
+    load ra, r6 ; i
+    mov r5, r6
+    sub r5, [iv + 1]
+    load r1, r5 ; m
+    lt ra, r1
+    xor ra, [iv + 0]
+    mov ra, 1
+    mov r5, .loop_break 
+    jnz r5, ra
+
+    ; vram_offset[i] = ' '
+    load ra, r6 ; i
+    mov r5, [vram_offset]
+    add r5, ra
+    mov ra, 32
+    store r5, ra
+
+    ; i++
+    load ra, r6 ; i
+    add ra, [iv + 1]
+    store r6, ra
+
+    mov r5, .loop_continue
+    jmp r5
+.loop_break:
+    ; return
+    load r7, r6
+    sub r6, [iv + 1]
+    load r5, r6
+    sub r6, [iv + 1]
+    jmp r5
+    
+main:
+    ; enter
+    add r6, [iv + 1]
+    store r6, r7
+    mov r7, r6
+
+    mov [vram_offset], (2 ** 11)
+    mov [vram_size], (80 * 24)
+
+    sub r6, [iv + 1]
+    mov r5, .main_return
+    store r6, r5
+    mov r5, clear_screen
+    jmp r5
+
+.main_return:
+    ; return
+    load r7, r6
+    sub r6, [iv + 1]
+    load r5, r6
+    sub r6, [iv + 1]
+    jmp r5
+
+_exit:
+    mov r5, 16000
+    jmp r5
diff --git a/danskc/virtual-computer/test2.asm b/danskc/virtual-computer/test2.asm
new file mode 100644
index 0000000..6a1fc2e
--- /dev/null
+++ b/danskc/virtual-computer/test2.asm
@@ -0,0 +1,20 @@
+
+offset: noop
+one: noop
+
+    mov [offset], (2 ** 11)
+    mov [one], 1
+
+    mov r1, 65
+    mov r5, [offset]
+
+.repeat:
+    add r5, [one]
+    store r5, r1
+
+    mov ra, ((2**11) + (80*24))
+    lt ra, r5
+    xor ra, [one]
+    jnz [.repeat], ra
+
+    jmp [32000]
\ No newline at end of file
-- 
2.25.1

