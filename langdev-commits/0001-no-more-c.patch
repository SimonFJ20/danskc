From cedd0d48976effb0141f7a2a99c3be07a110c446 Mon Sep 17 00:00:00 2001
From: SimonFJ20 <simonfromjakobsen@gmail.com>
Date: Sat, 22 Oct 2022 00:23:49 +0200
Subject: [PATCH] no more c

---
 danskc/runtime/Makefile  |  24 --------
 danskc/runtime/array.c   | 118 ---------------------------------------
 danskc/runtime/array.h   |  28 ----------
 danskc/runtime/dstring.c | 108 -----------------------------------
 danskc/runtime/dstring.h |  28 ----------
 danskc/runtime/find.ts   |  70 -----------------------
 danskc/runtime/hashmap.c | 114 -------------------------------------
 danskc/runtime/hashmap.h |  26 ---------
 danskc/runtime/object.h  |   8 ---
 danskc/runtime/panic.h   |   8 ---
 danskc/runtime/runtime.c |  24 --------
 11 files changed, 556 deletions(-)
 delete mode 100644 danskc/runtime/Makefile
 delete mode 100644 danskc/runtime/array.c
 delete mode 100644 danskc/runtime/array.h
 delete mode 100644 danskc/runtime/dstring.c
 delete mode 100644 danskc/runtime/dstring.h
 delete mode 100644 danskc/runtime/find.ts
 delete mode 100644 danskc/runtime/hashmap.c
 delete mode 100644 danskc/runtime/hashmap.h
 delete mode 100644 danskc/runtime/object.h
 delete mode 100644 danskc/runtime/panic.h
 delete mode 100644 danskc/runtime/runtime.c

diff --git a/danskc/runtime/Makefile b/danskc/runtime/Makefile
deleted file mode 100644
index 01cd176..0000000
--- a/danskc/runtime/Makefile
+++ /dev/null
@@ -1,24 +0,0 @@
-
-CFLAGS=-Wall -g
-LFLAGS=
-
-LD=clang
-CC=gcc
-
-TARGET=danskr
-
-CFILES=$(wildcard *.c)
-HFILES=$(wildcard *.h)
-OFILES=$(patsubst %.c, %.o, $(CFILES))
-
-$(TARGET): $(OFILES)
-	$(LD) -o $@ $^ $(LFLAGS)
-
-%.o: %.c $(HFILES)
-	$(CC) -o $@ $< -c $(CFLAGS)
-
-.PHONY: clean
-
-clean:
-	rm $(OFILES)
-	rm $(TARGET)
diff --git a/danskc/runtime/array.c b/danskc/runtime/array.c
deleted file mode 100644
index eba95f2..0000000
--- a/danskc/runtime/array.c
+++ /dev/null
@@ -1,118 +0,0 @@
-#include "array.h"
-#include "panic.h"
-#include <stdlib.h>
-
-void construct_array(Array* array)
-{
-    *array = (Array) {
-        .size = 0,
-        .capacity = ARRAY_ELEMENT_CHUNK,
-        .ptr = calloc(ARRAY_ELEMENT_CHUNK, sizeof(void*)),
-    };
-}
-
-void destruct_array(Array* array)
-{
-    if (array->size != 0)
-        PANIC("cannot destruct non-empty array");
-    free(array->ptr);
-}
-
-Array* new_array()
-{
-    Array* array = calloc(1, sizeof(Array));
-    construct_array(array);
-    return array;
-}
-
-void delete_array(Array* array)
-{
-    destruct_array(array);
-    free(array);
-}
-
-void array_destruct_deep(Array* array, void (*destructor)(void* value))
-{
-    array_destruct_values(array, destructor);
-    destruct_array(array);
-}
-
-void array_destruct_values(Array* array, void (*destructor)(void* value))
-{
-    while (array->size) {
-        array->size--;
-        destructor(array->ptr[array->size]);
-    }
-}
-
-size_t array_size(const Array* array)
-{
-    return array->size;
-}
-
-void* array_at(const Array* array, size_t index)
-{
-    if (index < 0 || index >= array->size)
-        PANIC("index out of bounds");
-    return array->ptr[index];
-}
-
-void array_push(Array* array, void* value)
-{
-    if (array->size == array->capacity) {
-        array->capacity += ARRAY_ELEMENT_CHUNK;
-        array->ptr = realloc(array->ptr, sizeof(void*) * array->capacity);
-    }
-    array->ptr[array->size] = value;
-    array->size++;
-}
-
-void* array_pop(Array* array)
-{
-    if (array->size == 0)
-        PANIC("cannot pop from empty array");
-    array->size--;
-    void* value = array->ptr[array->size];
-    array->ptr[array->size] = NULL;
-    return value;
-}
-
-void array_add(Array* array, size_t amount, void** values)
-{
-    if (array->capacity - array->size < amount) {
-        array->capacity = array->size + amount + (amount % ARRAY_ELEMENT_CHUNK);
-        array->ptr = realloc(array->ptr, sizeof(void*) * array->capacity);
-    }
-    for (size_t i = 0; i < amount; i++) {
-        array->ptr[array->size] = values[i];
-        array->size++;
-    }
-}
-
-void array_insert_at(Array* array, void* value, size_t index)
-{
-    if (index > array->size)
-        PANIC("index out of bounds");
-    Array buffer;
-    construct_array(&buffer);
-    while (array->size > index)
-        array_push(&buffer, array_pop(array));
-    array_push(array, value);
-    for (size_t i = 0; i < array_size(&buffer); i++)
-        array_push(array, array_pop(&buffer));
-    destruct_array(&buffer);
-}
-
-void array_remove_and_shift_at(Array* array, size_t index)
-{
-    if (index >= array->size)
-        PANIC("index out of bounds");
-    Array buffer;
-    construct_array(&buffer);
-    while (array->size > index)
-        array_push(&buffer, array_pop(array));
-    array_pop(array);
-    for (size_t i = 0; i < array_size(&buffer); i++)
-        array_push(array, array_pop(&buffer));
-    destruct_array(&buffer);
-}
diff --git a/danskc/runtime/array.h b/danskc/runtime/array.h
deleted file mode 100644
index c926cb8..0000000
--- a/danskc/runtime/array.h
+++ /dev/null
@@ -1,28 +0,0 @@
-#ifndef ARRAY_H
-#define ARRAY_H
-
-#include <stdlib.h>
-
-#define ARRAY_ELEMENT_CHUNK 8
-#define ARRAY_VALUE_DESTRUCTOR void (*)(void* value)
-
-typedef struct Array {
-    size_t size, capacity;
-    void** ptr;
-} Array;
-
-void construct_array(Array* array);
-void destruct_array(Array* array);
-Array* new_array();
-void delete_array(Array* array);
-void array_destruct_deep(Array* array, ARRAY_VALUE_DESTRUCTOR);
-void array_destruct_values(Array* array, void (*destructor)(void* value));
-size_t array_size(const Array* array);
-void* array_at(const Array* array, size_t index);
-void array_push(Array* array, void* value);
-void* array_pop(Array* array);
-void array_add(Array* array, size_t amount, void** values);
-void array_insert_at(Array* array, void* value, size_t index);
-void array_remove_and_shift_at(Array* array, size_t index);
-
-#endif
\ No newline at end of file
diff --git a/danskc/runtime/dstring.c b/danskc/runtime/dstring.c
deleted file mode 100644
index af61a42..0000000
--- a/danskc/runtime/dstring.c
+++ /dev/null
@@ -1,108 +0,0 @@
-#include "dstring.h"
-#include "panic.h"
-#include <stdint.h>
-#include <stdlib.h>
-#include <string.h>
-
-void construct_string(String* string)
-{
-    *string = (String) {
-        .size = 0,
-        .capacity = STRING_CHAR_CHUNK,
-        .value = calloc(STRING_CHAR_CHUNK, sizeof(char)),
-    };
-}
-
-void destruct_string(String* string)
-{
-    free(string->value);
-}
-
-String* new_string()
-{
-    String* string = calloc(1, sizeof(String));
-    construct_string(string);
-    return string;
-}
-
-void delete_string(String* string)
-{
-    destruct_string(string);
-    free(string);
-}
-
-String* string_from(const char* value)
-{
-    size_t length = strlen(value);
-    size_t capacity = length + (length % STRING_CHAR_CHUNK);
-    String* string = calloc(1, sizeof(String));
-    *string = (String) {
-        .size = length,
-        .capacity = capacity,
-        .value = calloc(capacity, sizeof(char)),
-    };
-    strncpy(string->value, value, length);
-    return string;
-}
-
-String* string_clone(const String* other)
-{
-    String* string = calloc(1, sizeof(String));
-    *string = (String) {
-        .size = other->size,
-        .capacity = other->capacity,
-        .value = calloc(other->capacity, sizeof(char)),
-    };
-    strncpy(string->value, other->value, other->size);
-    return string;
-}
-
-size_t string_size(const String* string)
-{
-    return string->size;
-}
-
-char string_at(String* string, size_t index)
-{
-    if (index < 0 || index > string->size)
-        PANIC("index out of bounds");
-    return string->value[index];
-}
-
-void string_add_char(String* string, char value)
-{
-    if (string->capacity == string->size) {
-        string->capacity += STRING_CHAR_CHUNK;
-        string->value = realloc(string->value, string->capacity);
-    }
-    string->value[string->size] = value;
-    string->size++;
-    string->value[string->size] = '\0';
-}
-
-String* string_add(String* string, String* other)
-{
-    if (string->capacity - string->size < other->size) {
-        string->capacity += other->size + (other->size % STRING_CHAR_CHUNK);
-        string->value = realloc(string->value, string->capacity);
-    }
-    for (size_t i = 0; i < other->size; i++) {
-        string->value[string->size] = other->value[i];
-        string->size++;
-    }
-    string->value[string->size] = '\0';
-    return string;
-}
-
-const char* string_as_cstr(const String* string)
-{
-    return string->value;
-}
-
-uint64_t string_hash(const String* string)
-{
-    uint64_t hash = STRING_MAGIC_HASH_VALUE;
-    for (size_t i = 0; i < string->size; i++)
-        hash = ((hash << 5) + hash) + string->value[i];
-    return hash;
-}
diff --git a/danskc/runtime/dstring.h b/danskc/runtime/dstring.h
deleted file mode 100644
index 92cd505..0000000
--- a/danskc/runtime/dstring.h
+++ /dev/null
@@ -1,28 +0,0 @@
-#ifndef DSTRING_H
-#define DSTRING_H
-
-#include <stdint.h>
-#include <stdlib.h>
-
-#define STRING_CHAR_CHUNK 8
-#define STRING_MAGIC_HASH_VALUE 5381
-
-typedef struct String {
-    size_t size, capacity;
-    char* value;
-} String;
-
-void construct_string(String* string);
-void destruct_string(String* string);
-String* new_string();
-void delete_string(String* string);
-String* string_from(const char* value);
-String* string_clone(const String* other);
-size_t string_size(const String* string);
-char string_at(String* string, size_t index);
-void string_add_char(String* string, char value);
-String* string_add(String* string, String* other);
-const char* string_as_cstr(const String* string);
-uint64_t string_hash(const String* string);
-
-#endif
\ No newline at end of file
diff --git a/danskc/runtime/find.ts b/danskc/runtime/find.ts
deleted file mode 100644
index 3cb4b03..0000000
--- a/danskc/runtime/find.ts
+++ /dev/null
@@ -1,70 +0,0 @@
-import { assertEquals } from "https://deno.land/std/testing/asserts.ts";
-
-type Pair = {
-    key: number;
-    value: string;
-};
-
-const pair = (key: number, value: string): Pair => ({ key, value });
-
-// const find = (
-//     pairs: Pair[],
-//     key: number,
-//     first: number,
-//     last: number,
-// ): number => {
-//     for (let i = first; i < last; i++) if (pairs[i].key === key) return i;
-//     return -1;
-// };
-
-const find = (
-    pairs: Pair[],
-    key: number,
-    first: number,
-    last: number,
-): number => {
-    if (pairs.length === 0) return -1;
-    const middle = Math.floor((first + last) / 2);
-    if (pairs[middle].key === key) return middle;
-    else if (first === last) return -1;
-    else if (pairs[middle].key > key) return find(pairs, key, first, middle);
-    else return find(pairs, key, middle, last);
-};
-
-Deno.test("0 elements", () => {
-    assertEquals(find([], 0, 0, 0), -1);
-});
-
-Deno.test("1 elements", () => {
-    assertEquals(find([pair(0, "a")], 0, 0, 1), 0);
-});
-
-Deno.test("2 elements", () => {
-    assertEquals(find([pair(0, "a"), pair(1, "b")], 0, 0, 2), 0);
-    assertEquals(find([pair(0, "a"), pair(1, "b")], 1, 0, 2), 1);
-});
-
-Deno.test("3 elements", () => {
-    assertEquals(find([pair(0, "a"), pair(1, "b"), pair(2, "c")], 0, 0, 3), 0);
-    assertEquals(find([pair(0, "a"), pair(1, "b"), pair(2, "c")], 1, 0, 3), 1);
-    assertEquals(find([pair(0, "a"), pair(1, "b"), pair(2, "c")], 2, 0, 3), 2);
-});
-
-Deno.test("4 elements", () => {
-    assertEquals(
-        find([pair(0, "a"), pair(1, "b"), pair(2, "c"), pair(3, "d")], 0, 0, 4),
-        0,
-    );
-    assertEquals(
-        find([pair(0, "a"), pair(1, "b"), pair(2, "c"), pair(3, "d")], 1, 0, 4),
-        1,
-    );
-    assertEquals(
-        find([pair(0, "a"), pair(1, "b"), pair(2, "c"), pair(3, "d")], 2, 0, 4),
-        2,
-    );
-    assertEquals(
-        find([pair(0, "a"), pair(1, "b"), pair(2, "c"), pair(3, "d")], 3, 0, 4),
-        3,
-    );
-});
diff --git a/danskc/runtime/hashmap.c b/danskc/runtime/hashmap.c
deleted file mode 100644
index fa6b434..0000000
--- a/danskc/runtime/hashmap.c
+++ /dev/null
@@ -1,114 +0,0 @@
-#include "hashmap.h"
-#include "array.h"
-#include "dstring.h"
-#include "object.h"
-#include "panic.h"
-#include <assert.h>
-#include <stdint.h>
-#include <stdio.h>
-#include <stdlib.h>
-
-void construct_hashmap(HashMap* hashmap)
-{
-    *hashmap = (HashMap) {
-        .pairs = new_array(),
-    };
-}
-
-void destruct_hashmap(HashMap* hashmap)
-{
-    array_destruct_values(hashmap->pairs, free);
-    delete_array(hashmap->pairs);
-}
-
-HashMap* new_hashmap()
-{
-    HashMap* hashmap = calloc(1, sizeof(HashMap));
-    construct_hashmap(hashmap);
-    return hashmap;
-}
-
-void delete_hashmap(HashMap* hashmap)
-{
-    destruct_hashmap(hashmap);
-    free(hashmap);
-}
-
-HashMapPair* hashmap_pair_at(const HashMap* hashmap, size_t index)
-{
-    return array_at(hashmap->pairs, index);
-}
-
-size_t find_pair_in_range_maybe(const HashMap* hashmap, uint64_t key_hash, size_t first, size_t last)
-{
-    size_t pairs_size = array_size(hashmap->pairs);
-    if (pairs_size == 0 || first >= pairs_size)
-        return -1;
-    size_t middle = (first + last) / 2;
-    HashMapPair* pair = array_at(hashmap->pairs, middle);
-    if (key_hash < pair->key) {
-        return find_pair_in_range_maybe(hashmap, key_hash, first, middle - 1);
-    } else if (key_hash > pair->key) {
-        return find_pair_in_range_maybe(hashmap, key_hash, middle + 1, last);
-    } else {
-        assert(pair->key == key_hash);
-        return middle;
-    }
-}
-
-size_t find_unique_sorted_index(const HashMap* hashmap, uint64_t key_hash)
-{
-    for (size_t i = 0; i < array_size(hashmap->pairs); i++) {
-        uint64_t pair_hash = hashmap_pair_at(hashmap, i)->key;
-        if (pair_hash == key_hash)
-            PANIC("duplicate keys");
-        else if (pair_hash > key_hash)
-            return i;
-    }
-    return array_size(hashmap->pairs);
-}
-
-void hashmap_set(HashMap* hashmap, const String* key, void* value)
-{
-    uint64_t key_hash = string_hash(key);
-    size_t hashmap_size = array_size(hashmap->pairs);
-    if (array_size(hashmap->pairs) > 0) {
-        size_t index = find_pair_in_range_maybe(hashmap, key_hash, 0, hashmap_size);
-        if (index != -1) {
-            HashMapPair* pair = hashmap_pair_at(hashmap, index);
-            pair->value = value;
-        } else {
-            HashMapPair* pair = calloc(1, sizeof(HashMapPair));
-            *pair = (HashMapPair) {
-                .key = key_hash,
-                .value = value,
-            };
-            size_t unique_index = find_unique_sorted_index(hashmap, key_hash);
-            array_insert_at(hashmap->pairs, pair, unique_index);
-        }
-    } else {
-        HashMapPair* pair = calloc(1, sizeof(HashMapPair));
-        *pair = (HashMapPair) {
-            .key = key_hash,
-            .value = value,
-        };
-        size_t unique_index = find_unique_sorted_index(hashmap, key_hash);
-        array_insert_at(hashmap->pairs, pair, unique_index);
-    }
-}
-
-void* hashmap_get_maybe(const HashMap* hashmap, const String* key)
-{
-    size_t index = find_pair_in_range_maybe(hashmap, string_hash(key), 0, array_size(hashmap->pairs));
-    if (index != -1)
-        return hashmap_pair_at(hashmap, index)->value;
-    else
-        return NULL;
-}
-
-void hashmap_delete(HashMap* hashmap, const String* key)
-{
-    size_t index = find_pair_in_range_maybe(hashmap, string_hash(key), 0, array_size(hashmap->pairs));
-    if (index != -1)
-        array_remove_and_shift_at(hashmap->pairs, index);
-}
diff --git a/danskc/runtime/hashmap.h b/danskc/runtime/hashmap.h
deleted file mode 100644
index 99d2fe5..0000000
--- a/danskc/runtime/hashmap.h
+++ /dev/null
@@ -1,26 +0,0 @@
-#ifndef HASHMAP_H
-#define HASHMAP_H
-
-#include "array.h"
-#include "dstring.h"
-#include "object.h"
-#include <stdint.h>
-
-typedef struct HashMapPair {
-    uint64_t key;
-    void* value;
-} HashMapPair;
-
-typedef struct HashMap {
-    Array* pairs; // Array<HashMapPair>
-} HashMap;
-
-void construct_hashmap(HashMap* hashmap);
-void destruct_hashmap(HashMap* hashmap);
-HashMap* new_hashmap();
-void delete_hashmap(HashMap* hashmap);
-void hashmap_set(HashMap* hashmap, const String* key, void* value);
-void* hashmap_get_maybe(const HashMap* hashmap, const String* key);
-void hashmap_delete(HashMap* hashmap, const String* key);
-
-#endif
\ No newline at end of file
diff --git a/danskc/runtime/object.h b/danskc/runtime/object.h
deleted file mode 100644
index 7040117..0000000
--- a/danskc/runtime/object.h
+++ /dev/null
@@ -1,8 +0,0 @@
-#ifndef OBJECT_H
-#define OBJECT_H
-
-typedef struct Object {
-
-} Object;
-
-#endif
\ No newline at end of file
diff --git a/danskc/runtime/panic.h b/danskc/runtime/panic.h
deleted file mode 100644
index 0efe3b8..0000000
--- a/danskc/runtime/panic.h
+++ /dev/null
@@ -1,8 +0,0 @@
-#ifndef PANIC_H
-#define PANIC_H
-
-#include <stdio.h>
-
-#define PANIC(msg) (printf("panic: \"%s\", at \"./%s:%d\" in function \"%s\"\n\n", msg, __FILE__, __LINE__, __FUNCTION__), exit(1))
-
-#endif
\ No newline at end of file
diff --git a/danskc/runtime/runtime.c b/danskc/runtime/runtime.c
deleted file mode 100644
index 848e53d..0000000
--- a/danskc/runtime/runtime.c
+++ /dev/null
@@ -1,24 +0,0 @@
-#include "dstring.h"
-#include "hashmap.h"
-#include "panic.h"
-#include <stdint.h>
-#include <stdio.h>
-
-int main()
-{
-    int a = 4, b = 7;
-    HashMap* map = new_hashmap();
-    hashmap_set(map, string_from("a"), &a);
-    int* pa = hashmap_get_maybe(map, string_from("a"));
-    printf("*pa = %d\n", *pa);
-    hashmap_set(map, string_from("b"), &b);
-    int* pb = hashmap_get_maybe(map, string_from("b"));
-    if (pb == NULL)
-        PANIC("pb = NULL");
-    printf("*pb = %d\n", *pb);
-    hashmap_delete(map, string_from("b"));
-    int* pb1 = hashmap_get_maybe(map, string_from("b"));
-    printf("pb1 = %p\n", pb1);
-    int* pa1 = hashmap_get_maybe(map, string_from("a"));
-    printf("pa1 = %p\n", pa1);
-}
-- 
2.25.1

