From d64c007f9846ec6420e93bcb3d90570e034b4074 Mon Sep 17 00:00:00 2001
From: SimonFJ20 <simonfromjakobsen@gmail.com>
Date: Sat, 22 Oct 2022 01:06:30 +0200
Subject: [PATCH] vm in rust

---
 danskc/runtime/.gitignore  |  2 +-
 danskc/runtime/src/main.rs |  2 +
 danskc/runtime/src/vm.rs   | 82 ++++++++++++++++++++++++++++++++++++++
 3 files changed, 85 insertions(+), 1 deletion(-)
 create mode 100644 danskc/runtime/src/vm.rs

diff --git a/danskc/runtime/.gitignore b/danskc/runtime/.gitignore
index 9f97022..2f7896d 100644
--- a/danskc/runtime/.gitignore
+++ b/danskc/runtime/.gitignore
@@ -1 +1 @@
-target/
\ No newline at end of file
+target/
diff --git a/danskc/runtime/src/main.rs b/danskc/runtime/src/main.rs
index e7a11a9..1249a9a 100644
--- a/danskc/runtime/src/main.rs
+++ b/danskc/runtime/src/main.rs
@@ -1,3 +1,5 @@
+mod vm;
+
 fn main() {
     println!("Hello, world!");
 }
diff --git a/danskc/runtime/src/vm.rs b/danskc/runtime/src/vm.rs
new file mode 100644
index 0000000..b951ccf
--- /dev/null
+++ b/danskc/runtime/src/vm.rs
@@ -0,0 +1,82 @@
+pub const MEMORY_SIZE: usize = 16384;
+
+pub enum Instruction {
+    Mov(usize, usize),
+    MovValue(usize, i8),
+    Jmp(usize),
+    Jnz(usize, usize),
+    Not(usize),
+    And(usize, usize),
+    Or(usize, usize),
+    Xor(usize, usize),
+    Add(usize, usize),
+    Sub(usize, usize),
+    Mul(usize, usize),
+    Div(usize, usize),
+    Mod(usize, usize),
+    Cmp(usize, usize),
+    Lt(usize, usize),
+    Gt(usize, usize),
+    ShiftLeft(usize, usize),
+    ShiftRight(usize, usize),
+}
+
+pub struct VM {
+    pc: usize,
+    ram: [i8; MEMORY_SIZE],
+}
+
+impl VM {
+    pub fn new() -> Self {
+        Self {
+            pc: 0,
+            ram: [0; MEMORY_SIZE],
+        }
+    }
+
+    pub fn run_instruction(&mut self, instruction: Instruction) {
+        match instruction {
+            Instruction::Mov(dest, src) => {
+                self.ram[dest] = self.ram[src];
+            }
+            Instruction::MovValue(dest, value) => {
+                self.ram[dest] = value;
+            }
+            Instruction::Jmp(addr) => {
+                self.pc = addr;
+                self.pc -= 1
+            }
+            Instruction::Jnz(addr, cond) => {
+                if self.ram[cond] != 0 {
+                    self.pc = addr
+                }
+                self.pc -= 1
+            }
+            Instruction::Not(dest) => self.ram[dest] = !self.ram[dest],
+            Instruction::And(dest, src) => self.ram[dest] &= self.ram[src],
+            Instruction::Or(dest, src) => self.ram[dest] |= self.ram[src],
+            Instruction::Xor(dest, src) => self.ram[dest] ^= self.ram[src],
+            Instruction::Add(dest, src) => self.ram[dest] += self.ram[src],
+            Instruction::Sub(dest, src) => self.ram[dest] -= self.ram[src],
+            Instruction::Mul(dest, src) => self.ram[dest] *= self.ram[src],
+            Instruction::Div(dest, src) => self.ram[dest] /= self.ram[src],
+            Instruction::Mod(dest, src) => self.ram[dest] %= self.ram[src],
+            Instruction::ShiftLeft(dest, src) => self.ram[dest] <<= self.ram[src],
+            Instruction::ShiftRight(dest, src) => self.ram[dest] >>= self.ram[src],
+            Instruction::Cmp(dest, src) => {
+                self.ram[dest] = if self.ram[dest] == self.ram[src] {
+                    1
+                } else {
+                    0
+                }
+            }
+            Instruction::Lt(dest, src) => {
+                self.ram[dest] = if self.ram[dest] < self.ram[src] { 1 } else { 0 }
+            }
+            Instruction::Gt(dest, src) => {
+                self.ram[dest] = if self.ram[dest] > self.ram[src] { 1 } else { 0 }
+            }
+        }
+        self.pc += 1
+    }
+}
-- 
2.25.1

