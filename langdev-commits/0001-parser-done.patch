From 1937c2fa888d2e5026aa634eb2a5b685c0c69555 Mon Sep 17 00:00:00 2001
From: SimonFJ20 <simonfromjakobsen@gmail.com>
Date: Wed, 19 Oct 2022 00:20:33 +0200
Subject: [PATCH] parser done

---
 danskc/danskc.py | 361 +++++++++++++++++++++++++++++++++++++++--------
 danskc/test.dk   |  17 +++
 2 files changed, 323 insertions(+), 55 deletions(-)

diff --git a/danskc/danskc.py b/danskc/danskc.py
index 8f73cc9..46d7630 100644
--- a/danskc/danskc.py
+++ b/danskc/danskc.py
@@ -1,3 +1,4 @@
+from __future__ import annotations
 from enum import Enum, auto
 from typing import Any, List, Optional, Tuple
 
@@ -11,15 +12,14 @@ class TokenTypes(Enum):
     KwLad = auto()
     KwHvis = auto()
     KwSå = auto()
-    KwEllersHvis = auto()
     KwEllers = auto()
     KwMens = auto()
     KwBryd = auto()
     KwSlut = auto()
     KwFunktion = auto()
     KwTilbagesend = auto()
-    KwFalskt = auto()
-    KwSandt = auto()
+    KwFalsk = auto()
+    KwSand = auto()
     LParen = auto()
     RParen = auto()
     LBrace = auto()
@@ -28,6 +28,8 @@ class TokenTypes(Enum):
     RBracket = auto()
     Dot = auto()
     Comma = auto()
+    Colon = auto()
+    Semicolon = auto()
     Plus = auto()
     Minus = auto()
     Asterisk = auto()
@@ -50,10 +52,11 @@ class Token:
     def __str__(self) -> str:
         return F"{{ tt: {self.tt}, value: \"{self.value}\", row: {self.line} }}"
 
-def matches(pool: str, matcher: str) -> bool:
+def chars_match(pool: str, matcher: str) -> bool:
     if len(pool) < len(matcher):
         return False
     for i, v in enumerate(matcher):
+        print(f"'{pool[i]}' == '{v}' == {pool[i] == v}, {ord(pool[i])} {ord(v)}")
         if pool[i] != v:
             return False
     return True
@@ -66,69 +69,66 @@ def tokenize(text: str) -> List[Token]:
     i = 0
     line = 1
     while i < len(text):
+        # print('"' + text[i:i+2] + '"', chars_match(text[i:], "så"), text[i:i+2] == "sǻ")
         if text[i] in " \t\r\n":
             if text[i] == "\n":
                 line += 1
             i += 1
-        elif matches(text[i:], "KOMMENTAR"):
+        elif chars_match(text[i:], "KOMMENTAR"):
             while i < len(text) and text[i] != '\n':
                 i += 1
             i += 1
-        elif matches(text[i:], "KOMMENTER"):
-            while i < len(text) and not matches(text[i:], "FÆRDIG"):
+        elif chars_match(text[i:], "KOMMENTER"):
+            while i < len(text) and not chars_match(text[i:], "FÆRDIG"):
                 i += 1
             i += len("FÆRDIG")
-        elif matches(text[i:], "ikke"):
+        elif chars_match(text[i:], "ikke"):
             l = len("ikke")
             tokens.append(Token(TokenTypes.KwIkke, text[i : i + l], line))
             i += len("ikke")
-        elif matches(text[i:], "lad"):
+        elif chars_match(text[i:], "lad"):
             l = len("lad")
             tokens.append(Token(TokenTypes.KwLad, text[i : i + l], line))
             i += l
-        elif matches(text[i:], "hvis"):
+        elif chars_match(text[i:], "hvis"):
             l = len("hvis")
             tokens.append(Token(TokenTypes.KwHvis, text[i : i + l], line))
             i += l
-        elif matches(text[i:], "så"):
+        elif chars_match(text[i:], "så"):
             l = len("så")
             tokens.append(Token(TokenTypes.KwSå, text[i : i + l], line))
             i += l
-        elif matches(text[i:], "ellershvis"):
-            l = len("ellershvis")
-            tokens.append(Token(TokenTypes.KwEllersHvis, text[i : i + l], line))
-            i += l
-        elif matches(text[i:], "ellers"):
+        elif chars_match(text[i:], "ellers"):
             l = len("ellers")
             tokens.append(Token(TokenTypes.KwEllers, text[i : i + l], line))
             i += l
-        elif matches(text[i:], "mens"):
+        elif chars_match(text[i:], "mens"):
             l = len("mens")
             tokens.append(Token(TokenTypes.KwMens, text[i : i + l], line))
             i += l
-        elif matches(text[i:], "bryd"):
+        elif chars_match(text[i:], "bryd"):
             l = len("bryd")
             tokens.append(Token(TokenTypes.KwBryd, text[i : i + l], line))
             i += l
-        elif matches(text[i:], "slut"):
+        elif chars_match(text[i:], "slut"):
             l = len("slut")
             tokens.append(Token(TokenTypes.KwSlut, text[i : i + l], line))
             i += l
-        elif matches(text[i:], "funktion"):
+        elif chars_match(text[i:], "funktion"):
             l = len("funktion")
             tokens.append(Token(TokenTypes.KwFunktion, text[i : i + l], line))
             i += l
-        elif matches(text[i:], "tilbagesend"):
+        elif chars_match(text[i:], "tilbagesend"):
             l = len("tilbagesend")
             tokens.append(Token(TokenTypes.KwTilbagesend, text[i : i + l], line))
             i += l
-        elif matches(text[i:], "falskt"):
-            l = len("falskt")
-            tokens.append(Token(TokenTypes.KwTilbagesend, text[i : i + l], line))
+        elif chars_match(text[i:], "falsk"):
+            l = len("falsk")
+            tokens.append(Token(TokenTypes.KwFalsk, text[i : i + l], line))
             i += l
-        elif matches(text[i:], "sandt"):
-            l = len("sandt")
-            tokens.append(Token(TokenTypes.KwTilbagesend, text[i : i + l], line))
+        elif chars_match(text[i:], "sand"):
+            l = len("sand")
+            tokens.append(Token(TokenTypes.KwSand, text[i : i + l], line))
             i += l
         elif text[i] in ID_CHARS:
             value = text[i]
@@ -186,67 +186,163 @@ def tokenize(text: str) -> List[Token]:
             value += text[i]
             i += 1
             tokens.append(Token(TokenTypes.String, value, line))
-        elif matches(text[i:], "("):
+        elif chars_match(text[i:], "("):
             tokens.append(Token(TokenTypes.LParen, text[i], line))
             i += 1
-        elif matches(text[i:], ")"):
+        elif chars_match(text[i:], ")"):
             tokens.append(Token(TokenTypes.RParen, text[i], line))
             i += 1
-        elif matches(text[i:], "{"):
+        elif chars_match(text[i:], "{"):
             tokens.append(Token(TokenTypes.LBrace, text[i], line))
             i += 1
-        elif matches(text[i:], "}"):
+        elif chars_match(text[i:], "}"):
             tokens.append(Token(TokenTypes.RBrace, text[i], line))
             i += 1
-        elif matches(text[i:], "["):
+        elif chars_match(text[i:], "["):
             tokens.append(Token(TokenTypes.LBracket, text[i], line))
             i += 1
-        elif matches(text[i:], "]"):
+        elif chars_match(text[i:], "]"):
             tokens.append(Token(TokenTypes.RBracket, text[i], line))
             i += 1
-        elif matches(text[i:], "+="):
+        elif chars_match(text[i:], "+="):
             tokens.append(Token(TokenTypes.PlusAssign, text[i : i + 2], line))
             i += 2
-        elif matches(text[i:], "."):
+        elif chars_match(text[i:], "."):
             tokens.append(Token(TokenTypes.Dot, text[i], line))
             i += 1
-        elif matches(text[i:], ","):
+        elif chars_match(text[i:], ","):
             tokens.append(Token(TokenTypes.Comma, text[i], line))
             i += 1
-        elif matches(text[i:], "+"):
+        elif chars_match(text[i:], ":"):
+            tokens.append(Token(TokenTypes.Colon, text[i], line))
+            i += 1
+        elif chars_match(text[i:], ";"):
+            tokens.append(Token(TokenTypes.Semicolon, text[i], line))
+            i += 1
+        elif chars_match(text[i:], "+"):
             tokens.append(Token(TokenTypes.Plus, text[i], line))
             i += 1
-        elif matches(text[i:], "-"):
+        elif chars_match(text[i:], "-"):
             tokens.append(Token(TokenTypes.Minus, text[i], line))
             i += 1
-        elif matches(text[i:], "*"):
+        elif chars_match(text[i:], "*"):
             tokens.append(Token(TokenTypes.Asterisk, text[i], line))
             i += 1
-        elif matches(text[i:], "=="):
+        elif chars_match(text[i:], "=="):
             tokens.append(Token(TokenTypes.EQ, text[i : i + 2], line))
             i += 2
-        elif matches(text[i:], "!="):
+        elif chars_match(text[i:], "!="):
             tokens.append(Token(TokenTypes.NE, text[i : i + 2], line))
             i += 2
-        elif matches(text[i:], "<="):
+        elif chars_match(text[i:], "<="):
             tokens.append(Token(TokenTypes.LTE, text[i : i + 2], line))
             i += 2
-        elif matches(text[i:], "<"):
+        elif chars_match(text[i:], "<"):
             tokens.append(Token(TokenTypes.LT, text[i], line))
             i += 1
-        elif matches(text[i:], ">="):
+        elif chars_match(text[i:], ">="):
             tokens.append(Token(TokenTypes.GTE, text[i : i + 2], line))
             i += 2
-        elif matches(text[i:], ">"):
+        elif chars_match(text[i:], ">"):
             tokens.append(Token(TokenTypes.GT, text[i], line))
             i += 1
-        elif matches(text[i:], "="):
+        elif chars_match(text[i:], "="):
             tokens.append(Token(TokenTypes.Assign, text[i], line))
             i += 1
         else:
             raise Exception(f"invalid char '{text[i]}'")
     return tokens
 
+def statements_to_string(statements: List[Statement]) -> str:
+    statements_ = "\n".join(str(statement) for statement in statements)
+    return f"[ {statements_} ]"
+
+class StatementType(Enum):
+    Expr = auto()
+    Let = auto()
+    If = auto()
+    While = auto()
+    Break = auto()
+    Func = auto()
+    Return = auto()
+
+class Statement:
+    def __init__(self) -> None:
+        pass
+
+    def statement_type(self) -> StatementType: raise NotImplementedError()
+    def __str__(self) -> str: raise NotImplementedError()
+
+class ExprStatement(Statement):
+    def __init__(self, value: Expr) -> None:
+        super().__init__()
+        self.value = value
+    
+    def statement_type(self) -> StatementType: return StatementType.Expr
+    def __str__(self) -> str: return f"ExprStatement {{ value: {self.value} }}"
+
+class Let(Statement):
+    def __init__(self, subject: str, value: Expr) -> None:
+        super().__init__()
+        self.subject = subject
+        self.value = value
+
+    def statement_type(self) -> StatementType: return StatementType.Let
+    def __str__(self) -> str: return f"Let {{ subject: {self.subject}, value: {self.value} }}"
+
+class If(Statement):
+    def __init__(self, condition: Expr, truthy: List[Statement], falsy: List[Statement]) -> None:
+        super().__init__()
+        self.condition = condition
+        self.truthy = truthy
+        self.falsy = falsy
+
+    def statement_type(self) -> StatementType: return StatementType.If
+    def __str__(self) -> str:
+        truthy = ", ".join(str(statement) for statement in self.truthy)
+        falsy = ", ".join(str(statement) for statement in self.falsy)
+        return f"If {{ condition: {self.condition}, truthy: [ {truthy} ], falsy: [ {falsy} ] }}"
+
+class While(Statement):
+    def __init__(self, condition: Expr, body: List[Statement]) -> None:
+        super().__init__()
+        self.condition = condition
+        self.body = body
+
+    def statement_type(self) -> StatementType: return StatementType.While
+    def __str__(self) -> str:
+        body = ", ".join(str(statement) for statement in self.body)
+        return f"If {{ condition: {self.condition}, body: [ {body} ] }}"
+
+class Break(Statement):
+    def __init__(self) -> None:
+        super().__init__()
+
+    def statement_type(self) -> StatementType: return StatementType.While
+    def __str__(self) -> str:
+        return f"Break"
+
+class Func(Statement):
+    def __init__(self, subject: str, args: List[str], body: List[Statement]) -> None:
+        super().__init__()
+        self.subject = subject
+        self.args = args
+        self.body = body
+
+    def statement_type(self) -> StatementType: return StatementType.While
+    def __str__(self) -> str:
+        args = ", ".join(f"\"{arg}\"" for arg in self.args)
+        body = ", ".join(str(statement) for statement in self.body)
+        return f"Func {{ subject: {self.subject}, args: [ {args} ], body: [ {body} ] }}"
+
+class Return(Statement):
+    def __init__(self, value: Optional[Expr]) -> None:
+        super().__init__()
+        self.value = value
+    
+    def statement_type(self) -> StatementType: return StatementType.Expr
+    def __str__(self) -> str: return f"Return {{ value: {self.value} }}"
+
 class ExprType(Enum):
     Id = auto()
     Int = auto()
@@ -326,16 +422,18 @@ class Array(Expr):
 
     def expr_type(self) -> ExprType: return ExprType.Array
     def __str__(self) -> str:
-        return f"Array {{ values: [{', '.join(str(self.values))}] }}"
+        values = ", ".join(str(value) for value in self.values)
+        return f"Array {{ values: [ {values} ] }}"
 
 class Object(Expr):
-    def __init__(self, values: Tuple[str, Expr]) -> None:
+    def __init__(self, values: List[Tuple[str, Expr]]) -> None:
         super().__init__()
         self.values = values
 
     def expr_type(self) -> ExprType: return ExprType.Object
     def __str__(self) -> str:
-        return f"Object {{ values: [{', '.join(str(self.values))}] }}"
+        values = ", ".join(str(f"{{ key: \"{key}\", value: {value} }}") for (key,value) in self.values)
+        return f"Object {{ values: [ {values} ] }}"
 
 class Accessing(Expr):
     def __init__(self, subject: Expr, value: str) -> None:
@@ -365,7 +463,8 @@ class Call(Expr):
 
     def expr_type(self) -> ExprType: return ExprType.Call
     def __str__(self) -> str:
-        return f"Call {{ subject: {self.subject}, args: [{', '.join(str(arg) for arg in self.args)}] }}"
+        args = ", ".join(str(arg) for arg in self.args)
+        return f"Call {{ subject: {self.subject}, args: [ {args} ] }}"
 
 class UnaryOperations(Enum):
     Not = auto()
@@ -443,8 +542,160 @@ class Parser:
         if self.current_type() != tt:
             raise Exception(f"expected '{tt}', got {self.current()}")
 
+    def parse_statements(self) -> List[Statement]:
+        statements: List[Statement] = []
+        while not self.done() and self.current_type() == TokenTypes.Semicolon:
+            self.step()
+        while not self.done() and self.current_type() not in [TokenTypes.KwSlut, TokenTypes.KwEllers]:
+            statements.append(self.parse_statement())
+            while not self.done() and self.current_type() == TokenTypes.Semicolon:
+                self.step()
+        return statements
+
+    def parse_statement(self) -> Statement:
+        if self.done():
+            return self.parse_expr_statement()
+        elif self.current_type() == TokenTypes.KwFunktion:
+            return self.parse_func()
+        elif self.current_type() == TokenTypes.KwTilbagesend:
+            return self.parse_return()
+        elif self.current_type() == TokenTypes.KwMens:
+            return self.parse_while()
+        elif self.current_type() == TokenTypes.KwBryd:
+            return self.parse_break()
+        elif self.current_type() == TokenTypes.KwHvis:
+            return self.parse_if()
+        elif self.current_type() == TokenTypes.KwLad:
+            return self.parse_let()
+        else:
+            return self.parse_expr_statement()
+
+    def parse_func(self) -> Func:
+        self.step()
+        self.expect(TokenTypes.Id)
+        subject = self.current().value
+        self.step()
+        self.expect(TokenTypes.LParen)
+        self.step()
+        args: List[str] = []
+        while not self.done() and self.current_type() != TokenTypes.RParen:
+            self.expect(TokenTypes.Id)
+            args.append(self.current().value)
+            self.step()
+            if self.current_type() == TokenTypes.Comma:
+                self.step()
+            else:
+                break
+        self.expect(TokenTypes.RParen)
+        self.step()
+        body = self.parse_statements()
+        self.expect(TokenTypes.KwSlut)
+        self.step()
+        return Func(subject, args, body)
+
+    def parse_return(self) -> Return:
+        self.step()
+        if not self.done() and self.current_type() in [
+            TokenTypes.Semicolon,
+            TokenTypes.KwFunktion,
+            TokenTypes.KwTilbagesend,
+            TokenTypes.KwMens,
+            TokenTypes.KwBryd,
+            TokenTypes.KwHvis,
+            TokenTypes.KwLad,
+            TokenTypes.KwSlut,
+        ]:
+            return Return(None)
+        else:
+            return Return(self.parse_expr())
+
+    def parse_while(self) -> While:
+        self.step()
+        condition = self.parse_expr()
+        self.expect(TokenTypes.KwSå)
+        self.step()
+        body = self.parse_statements()
+        self.expect(TokenTypes.KwSlut)
+        self.step()
+        return While(condition, body)
+
+    def parse_break(self) -> Break:
+        self.step()
+        return Break()
+
+    def parse_if(self) -> If:
+        self.step()
+        condition = self.parse_expr()
+        self.expect(TokenTypes.KwSå)
+        self.step()
+        truthy = self.parse_statements()
+        if self.current_type() == TokenTypes.KwSlut:
+            self.step()
+            return If(condition, truthy, [])
+        elif self.current_type() == TokenTypes.KwEllers:
+            self.step()
+            if self.current_type() == TokenTypes.KwHvis:
+                elsecase = self.parse_if()
+                return If(condition, truthy, [elsecase])
+            else:
+                falsy = self.parse_statements()
+                self.expect(TokenTypes.KwSlut)
+                self.step()
+                return If(condition, truthy, falsy)
+        else:
+            raise Exception(f"expected 'ellers' or 'slut', got {self.current()}")
+
+    def parse_let(self) -> Let:
+        self.step()
+        self.expect(TokenTypes.Id)
+        subject = self.current().value
+        self.step()
+        self.expect(TokenTypes.Assign)
+        self.step()
+        value = self.parse_expr()
+        return Let(subject, value)
+
+    def parse_expr_statement(self) -> ExprStatement:
+        return ExprStatement(self.parse_expr())
+
     def parse_expr(self) -> Expr:
-        return self.parse_assignment()
+        if self.current_type() == TokenTypes.LBrace:
+            return self.parse_object()
+        elif self.current_type() == TokenTypes.LBracket:
+            return self.parse_array()
+        else:
+            return self.parse_assignment()
+
+    def parse_object(self) -> Object:
+        self.step()
+        values: List[Tuple[str, Expr]] = []
+        while not self.done() and self.current_type() != TokenTypes.RBrace:
+            self.expect(TokenTypes.Id)
+            key = self.current().value
+            self.step()
+            self.expect(TokenTypes.Colon)
+            self.step()
+            value = self.parse_expr()
+            if self.current_type() == TokenTypes.Comma:
+                self.step()
+            else:
+                break
+        self.expect(TokenTypes.RBrace)
+        self.step()
+        return Object(values)
+
+    def parse_array(self) -> Array:
+        self.step()
+        values: List[Expr] = []
+        while not self.done() and self.current_type() != TokenTypes.RBracket:
+            values.append(self.parse_expr())
+            if self.current_type() == TokenTypes.Comma:
+                self.step()
+            else:
+                break
+        self.expect(TokenTypes.RBracket)
+        self.step()
+        return Array(values)
 
     def parse_assignment(self) -> Expr:
         subject = self.parse_binary()
@@ -584,9 +835,9 @@ class Parser:
             return self.stepAndReturn(Char(self.current().value))
         elif self.current_type() == TokenTypes.String:
             return self.stepAndReturn(String(self.current().value))
-        elif self.current_type() == TokenTypes.KwFalskt:
+        elif self.current_type() == TokenTypes.KwFalsk:
             return self.stepAndReturn(Bool(False))
-        elif self.current_type() == TokenTypes.KwSandt:
+        elif self.current_type() == TokenTypes.KwSand:
             return self.stepAndReturn(Bool(True))
         else:
             raise Exception(f"expected value, got {self.current()}")
@@ -600,9 +851,9 @@ def main() -> None:
         print("=== TOKEN ===")
         for token in tokens:
             print(token)
-        ast = parser.parse_expr()
+        ast = parser.parse_statements()
         print("=== AST ===")
-        print(ast)
+        print(statements_to_string(ast))
 
 if __name__ == "__main__":
     main()
diff --git a/danskc/test.dk b/danskc/test.dk
index e69de29..35c6b1a 100644
--- a/danskc/test.dk
+++ b/danskc/test.dk
@@ -0,0 +1,17 @@
+KOMMENTER
+funktion hello(a, b)
+    tilbagesend a + b
+slut
+
+hvis a == 4 så
+    print("hello world\n")
+ellers
+    let b = "bruh moment"
+    let c = 4
+    hello(3, c)
+slut
+FÆRDIG
+
+mens a <= 4 så
+    tilbagesend
+slut
-- 
2.25.1

